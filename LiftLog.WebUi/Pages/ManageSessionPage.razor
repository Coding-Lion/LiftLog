@using LiftLog.WebUi.Store.SessionEditor
@using Fluxor
@using LiftLog.WebUi.Store.Program

@page "/manage-session/{sessionIndex:int}"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject NavigationManager NavigationManager
@inject IState<SessionEditorState> SessionEditorState
@inject IState<ProgramState> ProgramState
@inject IDispatcher Dispatcher

<div class="flex">
    <button @onclick="BackToManageWorkouts" class="m-1">&lt;</button>
    <h3>@SessionEditorState.Value.SessionBlueprint?.Name</h3>
</div>

@if (SessionEditorState.Value.SessionBlueprint is null)
{
    SubscribeToAction<RehydrateProgramAction>(_ =>
    {
        if (ProgramState.Value.SessionBlueprints.Count - 1 < SessionIndex)
        {
            BackToManageWorkouts();
        }
        Dispatcher.Dispatch(new SetEditingSessionAction(ProgramState.Value.SessionBlueprints[SessionIndex]));
    });
}
else
{
    <label>Name:</label>
    <input type="text" value="@SessionEditorState.Value.SessionBlueprint.Name" @onchange="@((e) => SetName(e.Value))"/>
    foreach (var (exercise, index) in SessionEditorState.Value.SessionBlueprint.Exercises.IndexedTuples())
    {
        <Card >
            <label>Name:</label>
            <input type="text" value="@exercise.Name" @onchange="@((e) => SetExerciseName(index, e.Value))"/>
            <button @onclick=@(() => MoveExerciseUp(exercise)) class="bg-slate-300 m-1">‚¨ÜÔ∏è</button>
            <button @onclick=@(() => MoveExerciseDown(exercise)) class="bg-slate-300 m-1">‚¨áÔ∏è</button>
            <button @onclick=@(() => RemoveExercise(exercise)) class="bg-slate-300 m-1">üóëÔ∏è</button>
            <div class="w-full flex-col">
                <div class="flex">
                    <button @onclick=@(() => DecrementExerciseSets(index))>-</button><span>@exercise.Sets Sets</span><button @onclick=@(() => IncrementExerciseSets(index))>+</button>
                </div>
                <div class="flex">
                    <button @onclick=@(() => DecrementExerciseRepsPerSet(index))>-</button><span>@exercise.RepsPerSet Reps</span><button @onclick=@(() => IncrementExerciseRepsPerSet(index))>+</button>
                </div>
                <div class="flex">
                    <label>Initial Weight</label><input type="number" step="0.01" value=@exercise.InitialKilograms @onchange=@((e) => SetExerciseInitialWeight(index, e.Value))/>
                </div>
            </div>
        </Card>
    }
    <AppButton @onclick=AddExercise>Add Exercise</AppButton>

    <AppButton @onclick=SaveSession>Save</AppButton>
}

@code {

    [Parameter]
    public int SessionIndex { get; set; }

    void BackToManageWorkouts() => NavigationManager.NavigateTo("/manage-workouts");

    void MoveExerciseUp(ExerciseBlueprint exerciseBlueprint) => Dispatcher.Dispatch(new MoveExerciseUpAction(exerciseBlueprint));

    void MoveExerciseDown(ExerciseBlueprint exerciseBlueprint) => Dispatcher.Dispatch(new MoveExerciseDownAction(exerciseBlueprint));
    
    void RemoveExercise(ExerciseBlueprint exerciseBlueprint) => Dispatcher.Dispatch(new RemoveExerciseAction(exerciseBlueprint));

    void SaveSession()
    {
        if (SessionEditorState.Value.SessionBlueprint is not null)
        {
            Dispatcher.Dispatch(new SetProgramSessionAction(SessionIndex, SessionEditorState.Value.SessionBlueprint));
        }
        BackToManageWorkouts();
    }

    void AddExercise()
    {
        Dispatcher.Dispatch(new AddExerciseAction(new ExerciseBlueprint($"Exercise {SessionEditorState.Value.SessionBlueprint?.Exercises.Count + 1}", 3, 10, 20, 2.5m, new Rest(TimeSpan.FromSeconds(90), TimeSpan.FromMinutes(3), TimeSpan.FromMinutes(5)))));
    }

    void DecrementExerciseSets(int exerciseIndex) => Dispatcher.Dispatch(new DecrementExerciseSetsAction(exerciseIndex));

    void IncrementExerciseSets(int exerciseIndex) => Dispatcher.Dispatch(new IncrementExerciseSetsAction(exerciseIndex));

    void DecrementExerciseRepsPerSet(int exerciseIndex) => Dispatcher.Dispatch(new DecrementExerciseRepsPerSetAction(exerciseIndex));

    void IncrementExerciseRepsPerSet(int exerciseIndex) => Dispatcher.Dispatch(new IncrementExerciseRepsPerSetAction(exerciseIndex));

    void SetExerciseName(int exerciseIndex, object? nameObj)
    {
        if (nameObj is string name)
            Dispatcher.Dispatch(new SetExerciseNameAction(exerciseIndex, name));
    }

    void SetName(object? nameObj)
    {
        if (nameObj is string name)
            Dispatcher.Dispatch(new SetEditingSessionNameAction(name));
    }

    void SetExerciseInitialWeight(int exerciseIndex, object? initialKilogramsObj)
    {
        if (initialKilogramsObj is string initialKilogramsStr && decimal.TryParse(initialKilogramsStr, out var initialKilograms))
        {
            Dispatcher.Dispatch(new SetExerciseInitialWeightAction(exerciseIndex, initialKilograms));
        }
    }

}