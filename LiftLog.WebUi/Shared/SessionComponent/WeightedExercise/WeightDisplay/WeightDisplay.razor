<div>
    <span>@(Exercise.Blueprint.Sets)x@(Exercise.Blueprint.RepsPerSet)</span>
    <AppButton Type="AppButtonType.OutlineSecondary" @onclick="OnOpenClick"><WeightFormat Kilograms=Exercise.Kilograms/>
    </AppButton>
</div>
<div class=@($"weight-display-popup {(PopupActive ? "active" :"")}")>
    <div class="weight-display-popup-content">
        <div class="weight-display-popup-header">
            <h3>@(Exercise.Blueprint.Name)</h3>
        </div>
        <div class="weight-display-popup-body">
            <div class="weight-display-popup-row">
                <div class="weight-display-popup-label">Weight</div>
            </div>
            <div class="weight-display-popup-row">
                <InputNumber @bind-Value=EditorWeight step=2.5 />
            </div>
            <div class="weight-display-popup-row">
                <div class="weight-display-weight-increment-buttons-grid">
                    <AppButton Type=AppButtonType.OutlineSecondary @onclick=OnWeightDecrementClick><WeightFormat Kilograms="-Exercise.Blueprint.KilogramsIncreaseOnSuccess"  /></AppButton>
                    <AppButton Type=AppButtonType.OutlineSecondary @onclick=OnWeightIncrementClick>+<WeightFormat Kilograms="Exercise.Blueprint.KilogramsIncreaseOnSuccess" /></AppButton>
                </div>
            </div>
            <div class="weight-display-button-row">
                <AppButton onclick=OnCloseClick Type=AppButtonType.Secondary>Close</AppButton>
                <AppButton onclick=OnSaveClick>Save</AppButton>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public RecordedExercise Exercise { get; set; } = null!;

    [Parameter]
    public Action<decimal> UpdateWeightForExercise { get;set; } = null!;

}
