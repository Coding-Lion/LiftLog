<div class="session">
    @foreach (var (exercise, i) in WorkoutSession.WeightedExercises.IndexedTuples())
    {
        <Card>
            <WeightedExercise @key=i Exercise="exercise" ToStartNext=@(WorkoutSession.NextExercise == exercise)
            CycleRepCountForSet=CycleRepCountForExerciseSet(i)
            UpdateWeightForExercise=UpdateWeightForExerciseWrapper(i) />
        </Card>
    }

    <AppButton onclick=SaveSession>Finish</AppButton>
    <AppButton onclick=CloseSession>Close</AppButton>

    @if (WorkoutSession.NextExercise is not null && WorkoutSession.LastExercise?.LastSet is not null)
    {
        var lastSetFailed = WorkoutSession.LastExercise.LastSet.RepsCompleted <
        WorkoutSession.LastExercise.PlanExercise.RepsPerSet;
        <RestTimer Rest=WorkoutSession.NextExercise.PlanExercise.RestBetweenSets
        StartTime=WorkoutSession.LastExercise.LastSet.CompletionTime Failed=lastSetFailed />
    }
</div>
@code {
    [Parameter]
    public WorkoutDay WorkoutSession { get; set; } = null!;

    [Parameter]
    public Action<int, int> CycleRepcountForExercise { get; set; } = null!;

    [Parameter]
    public Action<int, decimal> UpdateWeightForExercise { get;set; }=null!;

    [Parameter]
    public Action SaveSession { get; set; } = null!;

    [Parameter]
    public Action CloseSession { get; set; } = null!;

    private Action<int> CycleRepCountForExerciseSet(int exerciseIndex)
    => (int set) => CycleRepcountForExercise(exerciseIndex, set);

    private Action<decimal> UpdateWeightForExerciseWrapper(int exerciseIndex)
    => (decimal weight) => UpdateWeightForExercise(exerciseIndex, weight);
}
