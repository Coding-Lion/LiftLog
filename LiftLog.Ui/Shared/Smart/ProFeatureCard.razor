@using Fluxor
@using LiftLog.Ui.Services
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Settings

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject NavigationManager NavigationManager
@inject IAppPurchaseService AppPurchaseService
@inject IState<AppState> AppState
@inject IDispatcher Dispatcher

<Card >
    <SplitCardControl>
        <TitleContent>
            <ItemTitle Title="Pro Features" />
        </TitleContent>
        <Actions>
            @RenderLockedPro()
        </Actions>
        <MainContent>
            <div class="flex flex-col gap-4">

                <AppButton Disabled="!AppState.Value.ProState.IsPro" Type="AppButtonType.Primary" OnClick="NavigateToAiPlanner">
                    <md-icon slot="icon">auto_awesome</md-icon>
                    AI Program Planner
                </AppButton>
                <AppButton Disabled="!AppState.Value.ProState.IsPro" Type="AppButtonType.Secondary"
                        OnClick="NavigateToAiSessionCreator">
                    <md-icon slot="icon">auto_awesome</md-icon>
                    AI Session Creator
                </AppButton>
            </div>
        </MainContent>
    </SplitCardControl>
</Card>

<Dialog @ref="upgradeDialog">
    <span slot="headline">Upgrade to Pro</span>
    <span slot="content" class="block text-left">
        This will unlock the AI planner, which will generate a plan tailored
        specifically to you and your goals. <br/>This is a one time purchase of @RenderPrice().
    </span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" OnClick="() => upgradeDialog?.Close()">Close</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="UpgradeToPro">Upgrade</AppButton>
    </div>

</Dialog>

@code {
    private Price? price;
    private Dialog? upgradeDialog;

    protected override async Task OnInitializedAsync()
    {
        price = await AppPurchaseService.GetProPriceAsync();
        await base.OnInitializedAsync();
    }

    private RenderFragment? RenderLockedPro()
    {
        if (AppState.Value.ProState.IsPro)
        {
            return null;
        }

        return @<AppButton OnClick="() => { upgradeDialog?.Open(); }"><md-icon slot="icon">lock</md-icon>Unlock</AppButton>;
    }

    private RenderFragment RenderPrice()
    {
        if (price == null)
        {
            return @<span class="animate-pulse">
                       <span class="inline-block min-h-[1em] w-[4rem] flex-auto cursor-wait bg-current align-middle text-base text-neutral-700 opacity-50 dark:text-neutral-50"></span>
                   </span>;
        }

        return @<span>@(price?.LocalizedPrice) @(price?.Currency)</span>;
    }

    private void NavigateToAiPlanner()
    {
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(NavigationManager.Uri));
        NavigationManager.NavigateTo("/settings/ai-planner");
    }

    private void NavigateToAiSessionCreator()
    {
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(NavigationManager.Uri));
        NavigationManager.NavigateTo("/settings/ai-session-creator");
    }


    private async void UpgradeToPro()
    {
        var proKey = await AppPurchaseService.GetProKeyAsync();
        if (proKey != null)
        {
            Dispatcher.Dispatch(new SetProTokenAction(proKey));
        }

        await InvokeAsync(() => upgradeDialog?.Close());
    }

}
