@using System.Text.RegularExpressions
@implements IDisposable
@inject NavigationManager NavigationManager
<nav class="flex justify-around py-3 bg-surface-container text-on-surface">
    <NavButton IsActive=@IsRouteMatch("(/$|^$|/session/?)") Navigate="NavigateToWorkout" Icon="fitness_center" Text="Workout"></NavButton>
    <NavButton IsActive=@IsRouteMatch("/history(/?.*)") Navigate="NavigateToHistory" Icon="history" Text="History" ></NavButton>
    <NavButton IsActive=@IsRouteMatch("/stats(/?.*)") Navigate="NavigateToStats" Icon="show_chart" Text="Stats" ></NavButton>
    <NavButton IsActive=@IsRouteMatch("/settings(/?.*)") Navigate="NavigateToSettings" Icon="settings" Text="Settings"></NavButton>
</nav>
@code {

    protected override void OnInitialized()
    {

        NavigationManager.LocationChanged += LocationChanged;
    }

    private bool IsRouteMatch(string routeMatchRegex)
    {
        var reg = new Regex(routeMatchRegex);
        var absPath = new Uri(NavigationManager.Uri).AbsolutePath;
        return reg.IsMatch(absPath);
    }

    private void NavigateToWorkout()
    {
        NavigationManager.NavigateTo("/");
        StateHasChanged();
    }

    private void NavigateToSettings()
    {
        NavigationManager.NavigateTo("/settings");
        StateHasChanged();
    }

    private void NavigateToHistory()
    {
        NavigationManager.NavigateTo("/history");
        StateHasChanged();
    }

    private void NavigateToStats()
    {
        NavigationManager.NavigateTo("/stats");
        StateHasChanged();
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs locationChangedEventArgs)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
    }

}
