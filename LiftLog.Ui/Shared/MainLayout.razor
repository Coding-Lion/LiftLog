@using Fluxor
@using LiftLog.Ui.Store.App
@inherits Fluxor.Blazor.Web.Components.FluxorLayout
@inject IJSRuntime Js
@inject IState<AppState> AppState
@inject LiftLog.Ui.Services.IUserScrollListener UserScrollListener

<div class="h-full page bg-surface">
    <section class="relative h-full content">
        <div class="grid grid-cols-1 h-full grid-rows-[min-content_1fr_min-content]">
            <div class="flex items-center justify-center py-4 text-2xl @_topNavColorClass">
                <span class="m-0 text-on-surface">@AppState.Value.Title</span>
            </div>
            <div @ref="_contentElementRef" class="px-2 pb-2 overflow-auto bg-surface" @onscroll="OnContentScroll" style="-webkit-overflow-scrolling: touch;">
                @Body
            </div>
            <HomeNav></HomeNav>
        </div>
    </section>
</div>

<HeadContent>
    <title>@AppState.Value.Title</title>
</HeadContent>

@code {

    private ElementReference _contentElementRef;

    private string _topNavColorClass = "bg-surface";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
#if DEBUG
        if (firstRender)
        {
            await Js.InvokeAsync<IJSObjectReference>("import", "/_content/LiftLog.Ui/load-tailwind.js");
        }
#else
        await base.OnAfterRenderAsync(firstRender);
#endif
    }

    private async void OnContentScroll()
    {
        var scrollTop = await Js.InvokeAsync<double>("AppUtils.getScrollTop", _contentElementRef);
        var previousTopNavColorClass = _topNavColorClass;
        _topNavColorClass = scrollTop switch {
            // make it coloured after scrolling past 2px
            (<=2) => "bg-surface",
            _ => "bg-surface-container"
            };
            if(previousTopNavColorClass != _topNavColorClass)
            {
                await InvokeAsync(async ()=>
                {
                    StateHasChanged();
                    await Task.Yield();
                    await UserScrollListener.ScrollHasChangedAsync(scrollTop > 2);
                });
            }
    }

}
