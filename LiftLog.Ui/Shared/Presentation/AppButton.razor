@switch (Type)
{
    case AppButtonType.Primary:
        <md-filled-button
            @attributes="AdditionalAttributes" class="@(AdditionalAttributes?.GetValueOrDefault("class"))  pointer-events-auto" @onclick="Clicked" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true" >
            @ChildContent
        </md-filled-button>
        break;
    case AppButtonType.Secondary:
        <md-filled-tonal-button
            @attributes="AdditionalAttributes" class="@(AdditionalAttributes?.GetValueOrDefault("class"))  pointer-events-auto" @onclick="Clicked" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true" >
            @ChildContent
        </md-filled-tonal-button>
        break;
    case AppButtonType.OutlineSecondary:
        <md-outlined-button
            @attributes="AdditionalAttributes" class="@(AdditionalAttributes?.GetValueOrDefault("class"))  pointer-events-auto" @onclick="Clicked" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true" >
            @ChildContent
        </md-outlined-button>
        break;
    case AppButtonType.Text:
        <md-text-button
            @attributes="AdditionalAttributes" class="@(AdditionalAttributes?.GetValueOrDefault("class"))  pointer-events-auto" @onclick="Clicked" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true" >
            @ChildContent
        </md-text-button>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}


@code {

    [EditorRequired] [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter] public AppButtonType Type { get; set; } = AppButtonType.Primary;

    [Parameter] public bool Disabled { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private void Clicked()
    {
        if (Disabled) return;
        OnClick.InvokeAsync(null);
    }

}
