@*Source: https://flowbite.com/docs/components/buttons/#default-button*@
@switch (Type)
{
    case AppButtonType.FloatingPrimary:
        <md-filled-button class="block pointer-events-auto"  @onclick="OnClick" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true" style=" @FullHeightStyle @RoundingStyle">@ChildContent</md-filled-button>
        break;
    case AppButtonType.Primary:
        <md-filled-button class="block pointer-events-auto"  @onclick="OnClick" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true" style=" @FullHeightStyle @RoundingStyle">@ChildContent</md-filled-button>
        break;
    case AppButtonType.Secondary:
        <md-tonal-button class="block pointer-events-auto"  @onclick="OnClick" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true" style=" @FullHeightStyle @RoundingStyle">@ChildContent</md-tonal-button>
        break;
    case AppButtonType.OutlineSecondary:
        <md-outlined-button class="block pointer-events-auto"  @onclick="OnClick" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true" style="@FilledWithPrimaryStyle @FullHeightStyle @RoundingStyle">@ChildContent</md-outlined-button>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}


@code {

    [EditorRequired]
    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public AppButtonType Type { get; set; } = AppButtonType.Primary;

    [Parameter]
    public bool FullHeight { get; set; }

    [Parameter]
    public bool LargeRound { get; set; }
    [Parameter]
    public bool FilledWithPrimary { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    private string Rounding => LargeRound ? "rounded-xl": "rounded-md";

    private string RoundingStyle => $"--md-{MdButtonStyle}-button-container-shape: {(LargeRound ? "0.75rem" : "0.375rem" )}; border-radius: {(LargeRound ? "0.75rem" : "0.375rem" )}";
    private string FullHeightStyle => FullHeight ? $"--md-{MdButtonStyle}-button-container-height:100%;": "";

    private string FilledWithPrimaryStyle => FilledWithPrimary ? $"background-color: var(--md-sys-color-primary);--md-{MdButtonStyle}-button-focus-label-text-color:var(--md-sys-color-on-primary); --md-{MdButtonStyle}-button-with-icon-pressed-icon-color: var(--md-sys-color-on-primary); --md-{MdButtonStyle}-button-pressed-label-text-color: var(--md-sys-color-on-primary); --md-{MdButtonStyle}-button-hover-label-text-color: var(--md-sys-color-on-primary); --md-{MdButtonStyle}-button-label-text-color: var(--md-sys-color-on-primary);" : "";

    private string Aspect => FullHeight ? "aspect-square" : "";

    private string MdButtonStyle => Type switch {
        AppButtonType.FloatingPrimary => "filled",
        AppButtonType.Primary => "filled",
        AppButtonType.Secondary => "tonal",
        AppButtonType.OutlineSecondary => "outlined",
        _ => throw new ArgumentOutOfRangeException()
    };
}
