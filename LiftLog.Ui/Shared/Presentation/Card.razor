@inject IJSRuntime JsRuntime

<div
    class="@(AdditionalAttributes?.GetValueOrDefault("class")) @(HasPadding ?"py-5 px-4":"") relative @Style rounded-card text-on-surface card"
    @onclick="HandleOnClick">
    @if (OnClick != null)
    {
        <md-ripple></md-ripple>
    }
    <md-elevation style="--md-elevation-level: @(Type == CardType.Elevated ? 1 : 0);"></md-elevation>
    @ChildContent
</div>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    [Parameter] public Action<MouseEventArgs>? OnClick { get; set; }

    [Parameter] public bool IsHighlighted { get; set; }

    [Parameter] public CardType Type { get; set;  } = CardType.Outlined;
    
    [Parameter] public bool HasPadding { get; set; } = true;

    private string Style => Type switch
    {
        CardType.Outlined when IsHighlighted => "border border-2 border-primary bg-surface",
        CardType.Outlined when !IsHighlighted => "border border-outline-variant bg-surface",
        CardType.Filled => "bg-surface-container-highest",
        CardType.Elevated => "bg-surface-container-low",
        _ => "",
    };

    private void HandleOnClick(MouseEventArgs args)
    {
        OnClick?.Invoke(args);
    }

    public enum CardType
    {
        Outlined,
        Filled,
        Elevated
    }

}