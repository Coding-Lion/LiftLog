@inject IJSRuntime JSRuntime

<md-list-item @ref="_listItem" @attributes="AdditionalAttributes" type="button" class="text-left @(AdditionalAttributes?.GetValueOrDefault("class")) @FocusClass" multi-line-supporting-text @onclick="OnClick">
    <span slot="headline" >@ProgramBlueprint.Name</span>
    <span slot="supporting-text">@SupportingText</span>

    <div slot="end" class="flex align-middle">
        @RenderActiveBadge()
        <IconButton id="@_iconButtonId" Type="IconButtonType.Standard" Icon="more_horiz" OnClick=@(() => _menu?.Open())></IconButton>
        <Menu  anchor="@_iconButtonId" @ref="_menu">
            <MenuItem Icon="delete" Label="Remove" OnClick="() => OnRemove.InvokeAsync()"/>
            <MenuItem Icon="content_copy" Label="Duplicate" OnClick="() => OnDuplicate.InvokeAsync()"/>
        </Menu>
    </div>
</md-list-item>


@code {
    private string _iconButtonId ="a"+Guid.NewGuid();

    private Menu? _menu;

    private ElementReference _listItem;

    [Parameter] [EditorRequired] public ProgramBlueprint ProgramBlueprint { get; set; } = null!;

    [Parameter] [EditorRequired] public EventCallback OnClick { get; set; }

    [Parameter] [EditorRequired] public bool BuiltIn { get; set; }

    [Parameter] [EditorRequired] public bool IsActive { get; set; }

    [Parameter] [EditorRequired] public bool IsFocused { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public EventCallback OnUse { get; set; }
    [Parameter] public EventCallback OnRemove { get; set; }
    [Parameter] public EventCallback OnDuplicate { get; set; }

    private string SupportingText => $"Edited: {ProgramBlueprint.LastEdited.ToShortDateString()}";

    private string FocusClass => IsFocused ? "bg-secondary-container text-on-secondary-container " : "";

    private RenderFragment? RenderActiveBadge()
    {
        if (IsActive)
        {
            return @<div class="flex flex-col justify-center"><span class="rounded-full bg-secondary-container text-on-secondary-container px-3 py-2 text-md">Active</span></div>;
        }

        return @<AppButton Type="AppButtonType.Text" OnClick="()=>OnUse.InvokeAsync()">Use</AppButton>;
    }

}
