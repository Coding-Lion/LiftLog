@inject IJSRuntime JSRuntime

<md-list-item @ref="_listItem" @attributes="AdditionalAttributes" type="button" class="text-left @(AdditionalAttributes?.GetValueOrDefault("class")) " multi-line-supporting-text @onclick="OnClick">
    <span slot="headline">@ProgramBlueprint.Name</span>
    <span slot="supporting-text">@SupportingText</span>
    @if (!BuiltIn)
    {
        <div slot="end">
            <IconButton id="@_iconButtonId" Type="IconButtonType.Standard" Icon="more_horiz" OnClick=@(() => _menu?.Open())></IconButton>
            <Menu  anchor="@_iconButtonId" @ref="_menu">
                <MenuItem Icon="delete" Label="Remove" OnClick="() => OnRemove.InvokeAsync()"/>
                <MenuItem Icon="content_copy" Label="Duplicate" OnClick="() => OnDuplicate.InvokeAsync()"/>
            </Menu>
        </div>
    }
    else
    {
        <span slot="trailing-supporting-text">@TrailingSupportingText</span>
    }
</md-list-item>


@code {
    private string _iconButtonId ="a"+Guid.NewGuid();

    private Menu? _menu;

    private ElementReference _listItem;

    [Parameter] [EditorRequired] public ProgramBlueprint ProgramBlueprint { get; set; } = null!;

    [Parameter] [EditorRequired] public EventCallback OnClick { get; set; }

    [Parameter] [EditorRequired] public bool BuiltIn { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public EventCallback OnRemove { get; set; }
    [Parameter] public EventCallback OnDuplicate { get; set; }

    private string SupportingText => $"{ProgramBlueprint.Tag} - {ExperienceLevelText}";
    private string TrailingSupportingText => $"{ProgramBlueprint.DaysPerWeek} days";

    private string ExperienceLevelText
        => ProgramBlueprint.ExperienceLevel switch
        {
            Experience.Beginner => "Recommended for beginner lifters",
            Experience.Intermediate => "Recommended for intermediate lifters",
            Experience.Advanced => "Recommended for advanced lifters",
            Experience.Professional => "Recommended for professional lifters",
            _ => ""
        };

}
