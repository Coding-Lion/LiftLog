@using LiftLog.Ui.Util
<div class="flex flex-col gap-4">
  <div class="flex justify-between">
    <span class="text-xl">@RecordedExercise.Blueprint.Name</span>
    <div class="flex gap-1">
        <IconButton Type="IconButtonType.FilledTonal" OnClick="()=>{}">
            <md-icon>history</md-icon>
        </IconButton>
        <WeightDisplay
            Exercise="RecordedExercise"
            UpdateWeightForExercise="UpdateWeightForExercise"/>
        </div>
  </div>
  <div class="flex flex-wrap justify-center gap-4">
    @{
      var repToStartNext = RecordedExercise.RecordedSets.IndexOf(null);
    }
    @foreach (var (set, i) in RecordedExercise.RecordedSets.IndexedTuples())
    {
      <RepCount
        @key=i
        MaxReps="RecordedExercise.Blueprint.RepsPerSet"
        CycleRepCount=@(() => CycleRepCountForSet(i))
        ClearRepCount=@(() => ClearRepCountForSet(i))
        RepCountValue=@set?.RepsCompleted
        ToStartNext=@(ToStartNext && repToStartNext == i) />
    }
  </div>
</div>
@code {
  [EditorRequired]
  [Parameter]
  public RecordedExercise RecordedExercise { get; set; } = null!;

  [EditorRequired]
  [Parameter]
  public bool ToStartNext { get; set; }

  [EditorRequired]
  [Parameter]
  public Action<int> CycleRepCountForSet { get; set; } = null!;

  [EditorRequired]
  [Parameter]
  public Action<int> ClearRepCountForSet { get; set; } = null!;

  [EditorRequired]
  [Parameter]
  public Action<decimal> UpdateWeightForExercise { get; set; } = null!;
}
