@{
    var (displayedExercise, repToStartNext, notesToShow) = (_holdingPrevious, PreviousRecordedExercises?.FirstOrDefault()?.RecordedExercise) switch
    {
        (true, null) => (RecordedExercise, -1, RecordedExercise.Notes),
        (true, var previous) => (previous, -1, previous.Notes),
        (false, _) => (RecordedExercise, RecordedExercise.PotentialSets.IndexOf(x => x.Set is null), RecordedExercise.Notes)
    };
}
<div class="flex flex-col gap-4 py-4 pl-7 pr-2 w-full">
    <div class="flex flex-col">
        <div class="flex justify-between">
            <ItemTitle Title="@RecordedExercise.Blueprint.Name" />
            @if(!IsReadonly)
            {
                <div class="flex justify-end">
                    @if (PreviousRecordedExercises?.Any() == true)
                    {
                        <IconButton data-cy="prev-exercise-btn" Type="IconButtonType.Standard" Icon="history" OnStartHold="() => _holdingPrevious = true" OnEndHold="() => _holdingPrevious = false"/>
                    }
                    <IconButton data-cy="per-rep-weight-btn" Type=IconButtonType.Standard Icon=weight OnClick="ToggleExercisePerSetWeight"></IconButton>
                    <div>
                        <IconButton data-cy="more-exercise-btn" class="self-end" Type="IconButtonType.Standard" OnClick="() => { _menu?.Open(); }" Icon="more_horiz" id="@moreButtonId"/>
                        <Menu @ref="_menu" anchor="@moreButtonId">
                            <MenuItem Label="Edit" Icon="edit" OnClick="OnEditExercise"/>
                            <MenuItem data-cy="exercise-notes-btn" Label="Notes" Icon="notes" OnClick="OnOpenNotesButtonClick"/>
                            <MenuItem Label="Remove" Icon="delete" OnClick="OnRemoveExercise"/>
                        </Menu>
                    </div>
                </div>
            }
            else
            {
                <div class="h-[40px]">
                </div>
            }
        </div>
        <div class="self-start -m-3 -mt-6">
            <WeightDisplay
                Weight="displayedExercise.Weight"
                Increment="displayedExercise.Blueprint.WeightIncreaseOnSuccess"
                UpdateWeight="w => { if (w is not null) UpdateWeightForExercise(w.Value); }"
                IsReadonly="IsReadonly"/>
        </div>
    </div>
    <div class="flex justify-start flex-wrap gap-2">
        @foreach (var (set, i) in displayedExercise.PotentialSets.IndexedTuples())
        {
            <PotentialSetCounter
                @key=i
                Set="set"
                ShowWeight=displayedExercise.PerSetWeight
                MaxReps="displayedExercise.Blueprint.RepsPerSet"
                WeightIncrement="displayedExercise.Blueprint.WeightIncreaseOnSuccess"
                CycleRepCount=@(() => CycleRepCountForSet(i))
                ClearRepCount=@(() => ClearRepCountForSet(i))
                UpdateWeight=@((weight) => UpdateWeightForSet(i, weight))
                ToStartNext=@(ToStartNext && repToStartNext == i && !IsReadonly)/>
        }
    </div>
    @if (notesToShow is not null)
    {
        <div class="flex justify-start">
            <span data-cy="exercise-notes" class="text-tertiary font-bold">@notesToShow</span>
        </div>
    }
    @if (_holdingPrevious && PreviousRecordedExercises?.Any() == true)
    {
        <div class="-m-4 -mr-1">
            <StatGraphCardContent Title="" Statistics="[GetStatistics()]" RenderDelay=TimeSpan.Zero ShowTitle=false></StatGraphCardContent>
        </div>
    }
</div>

<Dialog @ref="notesDialog">
    <span slot="headline">@(RecordedExercise.Blueprint.Name) Notes</span>
    <div slot="content">
        <TextField label="Notes" TextFieldType="TextFieldType.Outline" Value="@EditorNotes" OnChange="HandleNotesChange" type="textarea"/>
    </div>
    <div slot="actions" data-cy="notes-dialog-actions">
        <AppButton Type="AppButtonType.Text" OnClick="@(() => notesDialog?.Close())">Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="HandleNotesSave">Save</AppButton>
    </div>
</Dialog>

@code {
    private string moreButtonId = "a" + Guid.NewGuid();
    private bool _holdingPrevious = false;
    private Menu? _menu;
    private Dialog? notesDialog;

    private string EditorNotes { get; set; } = "";

    [EditorRequired] [Parameter] public RecordedExercise RecordedExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public ImmutableListValue<DatedRecordedExercise> PreviousRecordedExercises { get; set; } = null!;

    [EditorRequired] [Parameter] public bool ToStartNext { get; set; }

    [EditorRequired] [Parameter] public Action<int> CycleRepCountForSet { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<int> ClearRepCountForSet { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<int, decimal> UpdateWeightForSet { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<decimal> UpdateWeightForExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<string?> UpdateNotesForExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action OnEditExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action ToggleExercisePerSetWeight { get; set; } = null!;

    [EditorRequired] [Parameter] public Action OnRemoveExercise { get; set; } = null!;

    [Parameter] public bool IsReadonly { get; set; } = false;

    private void HandleNotesChange(string value)
    {
        EditorNotes = value;
    }

    private void HandleNotesSave()
    {
        UpdateNotesForExercise(EditorNotes == "" ? null : EditorNotes);
        notesDialog?.Close();
    }

    private void OnOpenNotesButtonClick()
    {
        EditorNotes = RecordedExercise.Notes ?? "";
        notesDialog?.Open();
    }

    private StatisticOverTime GetStatistics()
    {
        return new StatisticOverTime(
            RecordedExercise.Blueprint.Name,
            PreviousRecordedExercises
                .Select(x => new TimeTrackedStatistic(x.DateTime, x.RecordedExercise.Weight))
                .ToImmutableList()
        );
    }

}
