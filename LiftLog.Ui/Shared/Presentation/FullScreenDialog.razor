
@inject InsetsManager InsetsManager
@if(opened)
{
    @* Put the dialog into a section in the main layout so that the scrim covers parent elements on ios *@
    <Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="Dialog">
        <div @ref=dialog class="@Animation fullscreen-dialog fixed top-0 bottom-0 left-0 right-0 bg-surface z-30 grid grid-cols-1 h-full grid-rows-[min-content_1fr_min-content]" data-open="@opened" @onclose=Close>
            <div class="h-[56px] flex justify-start items-center gap-2 px-2">
                <div style="height: @InsetsManager.SystemSafeInsetTop"></div>
                <IconButton Type="IconButtonType.Standard" Icon="close" OnClick="Close"/>
                <span class="text-xl mr-auto">@Title</span>
                <AppButton Type="AppButtonType.Text" OnClick="()=>{OnAction.InvokeAsync();Close();}">@Action</AppButton>
            </div>
            <div class="px-6 py-2 overflow-y-auto">
                @ChildContent
                <div style="height: @InsetsManager.SystemSafeInsetBottom"></div>
            </div>
        </div>
    </Microsoft.AspNetCore.Components.Sections.SectionContent>
}
@code
{

    private bool opened = false;
    private bool closing = false;
    private ElementReference dialog;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter][EditorRequired] public string Title { get; set; } = null!;

    [Parameter][EditorRequired] public string Action { get; set; } = null!;

    [Parameter] public EventCallback OnAction { get; set; }

    public void Open()
    {
        opened = true;
        StateHasChanged();
    }

    public void Close()
    {
        InvokeAsync(async ()=>{
            closing = true;
            StateHasChanged();
            await Task.Delay(200);
            opened = false;
            StateHasChanged();
            closing = false;
        });
    }

    private string Animation => closing ? "animate-fade-zoom-out" : "animate-fade-zoom-in";
}
