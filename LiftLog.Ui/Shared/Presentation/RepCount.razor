<button class="w-16 h-16 rounded-xl relative text-center text-xl flex justify-center align-middle transition-colors duration-75 items-center @ColorClass @RepCountToStartClass"
        @onpointerdown="OnPointerDown"
        @onpointerleave="OnPointerLeave"
        @onpointerup="OnPointerUp">
    <md-ripple style="--md-ripple-pressed-color: var(--md-sys-color-on-primary-container)" ></md-ripple>
    <span class="font-bold">@(RepCountValue?.ToString() ?? "-")</span>
    <span class="inline text-sm align-text-top">/@MaxReps</span>
</button>
@code {

    private DateTime? _lastPointerDownTime;
    private DateTime? _clearRepCountTime;

    [EditorRequired]
    [Parameter]
    public int MaxReps { get; set; }

    [EditorRequired]
    [Parameter]
    public int? RepCountValue { get; set; }

    [EditorRequired]
    [Parameter]
    public Action CycleRepCount { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action ClearRepCount { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public bool ToStartNext { get; set; }

    private string ColorClass => ToStartNext || RepCountValue is not null ? "bg-primary text-on-primary" : "bg-secondary-container text-on-secondary-container";

    private string? RepCountToStartClass => ToStartNext ? "animate-pulse" : null;

    private void OnPointerDown(PointerEventArgs args){
        _lastPointerDownTime = DateTime.Now;
        Task.Delay(500).ContinueWith(_ => {
            if (_lastPointerDownTime is null || _lastPointerDownTime.Value.AddMilliseconds(500) > DateTime.Now) return;
            _clearRepCountTime = DateTime.Now;
            ClearRepCount();
        });
    }

    private void OnPointerLeave(PointerEventArgs args){
        _lastPointerDownTime = null;
    }

    private void OnPointerUp(PointerEventArgs args){
        if(_clearRepCountTime is null)
        {
            CycleRepCount();
        }
        _clearRepCountTime = null;
        _lastPointerDownTime = null;
    }

}
