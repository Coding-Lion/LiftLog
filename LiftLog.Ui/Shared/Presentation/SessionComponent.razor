@using LiftLog.Ui.Util

<CardList Items="Session.RecordedExercises.IndexedTuples()">
    <WeightedExercise
        @key=context.Index
        RecordedExercise="context.Item"
        ToStartNext=@(Session.NextExercise == context.Item)
        CycleRepCountForSet=CycleRepCountForExerciseSet(context.Index)
        ClearRepCountForSet=ClearRepCountForExerciseSet(context.Index)
        UpdateWeightForExercise=UpdateWeightForExerciseWrapper(context.Index)
        PreviousRecordedExercise=PreviouslyCompleted.GetValueOrDefault(context.Item.Blueprint)
        OnEditExercise=@(() => BeginEditExercise(context.Index))
        OnRemoveExercise=@(()=> BeginRemoveExercise(context.Index)) />
</CardList>
<div class="flex flex-col items-center mt-6">
<AppButton OnClick="BeginAddExercise"><md-icon slot="icon">add</md-icon> Add Exercise</AppButton>
</div>
<div class="sticky bottom-0 flex flex-col pointer-events-none">
    <div class="flex justify-end w-full mt-2 mb-2">
        <AppButton Type="AppButtonType.FloatingPrimary" OnClick=SaveSession><md-icon slot="icon">save</md-icon>Save</AppButton>
    </div>
    @if (ShowRestTimer && Session.NextExercise is not null && Session.LastExercise?.LastRecordedSet is not null)
    {
        var lastSetFailed = Session.LastExercise.LastRecordedSet.RepsCompleted < Session.LastExercise.Blueprint.RepsPerSet;
        <RestTimer
            Rest=Session.NextExercise.Blueprint.RestBetweenSets
            StartTime=Session.LastExercise.LastRecordedSet.CompletionTime
            Failed=lastSetFailed/>
    }
</div>
<Dialog @ref="_editExerciseDialog" OnClose=@(()=> _exerciseToEditIndex = null) >
    <span slot="headline">@(_exerciseToEditIndex is null ? "Add" : "Edit") Exercise</span>
    @if(_editingExercise != null)
    {
        <SessionExerciseEditor
            Exercise=_editingExercise
            OnExerciseUpdate=@((e) => {_editingExercise = e; StateHasChanged();} ) />
    }
    <AppButton Type="AppButtonType.Text" slot="footer" OnClick="()=>{_editExerciseDialog?.Close(); }">Cancel</AppButton>
    <AppButton Type="AppButtonType.Text" slot="footer" OnClick="EditExerciseHandler" >Save</AppButton>
</Dialog>
<Dialog @ref="_removeExerciseDialog">
    <span slot="header">Remove Exercise?</span>
    <span class="block text-left">Exercise will be removed from the current session, future sessions will not be impacted.</span>
    <AppButton Type="AppButtonType.Text" slot="footer" OnClick="()=>{_removeExerciseDialog?.Close();}">Cancel</AppButton>
    <AppButton Type="AppButtonType.Text" slot="footer" OnClick="RemoveExerciseHandler">Remove</AppButton>
</Dialog>
@code {

    private SessionExerciseEditModel? _editingExercise;
    private int? _exerciseToEditIndex;
    private int? _exerciseToRemoveIndex;
    private Dialog? _editExerciseDialog;
    private Dialog? _removeExerciseDialog;

    [EditorRequired]
    [Parameter]
    public Session Session { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public ImmutableDictionary<ExerciseBlueprint, RecordedExercise> PreviouslyCompleted { get; set; } = null!;

    [Parameter]
    public bool ShowRestTimer { get; set; } = true;

    [EditorRequired]
    [Parameter]
    public Action<int, int> CycleRepcountForExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int, int> ClearRepCountForExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int, decimal> UpdateWeightForExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int, SessionExerciseEditModel> EditExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<SessionExerciseEditModel> AddExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int> RemoveExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action SaveSession { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action CloseSession { get; set; } = null!;

    private Action<int> CycleRepCountForExerciseSet(int exerciseIndex)
        => (int set) => CycleRepcountForExercise(exerciseIndex, set);


    private Action<int> ClearRepCountForExerciseSet(int exerciseIndex)
        => (int set) => ClearRepCountForExercise(exerciseIndex, set);

    private Action<decimal> UpdateWeightForExerciseWrapper(int exerciseIndex)
        => (decimal kilograms) => UpdateWeightForExercise(exerciseIndex, kilograms);

    private void EditExerciseHandler()
    {
        if (_editingExercise is not null)
        {
            if(_exerciseToEditIndex is not null)
            {
                EditExercise(_exerciseToEditIndex.Value, _editingExercise);
                _exerciseToEditIndex = null;
            } else {
                AddExercise(_editingExercise);
            }
        }
        _editExerciseDialog?.Close();
    }
    private void RemoveExerciseHandler()
    {
        if (_exerciseToRemoveIndex is not null)
        {
            RemoveExercise(_exerciseToRemoveIndex.Value);
            _exerciseToRemoveIndex = null;
        }
        _removeExerciseDialog?.Close();
    }

    private void BeginAddExercise()
    {
        _editingExercise = new SessionExerciseEditModel(
            Name: "",
            Sets: 3,
            Reps: 10,
            Kilograms: 0
        );
        _editExerciseDialog?.Open();
    }

    private void BeginEditExercise(int index)
    {
        var exercise = Session.RecordedExercises[index];
        _exerciseToEditIndex = index;
        _editingExercise = new SessionExerciseEditModel(
            exercise.Blueprint.Name,
            exercise.Blueprint.Sets,
            exercise.Blueprint.RepsPerSet,
            exercise.Kilograms);
        StateHasChanged();
        _editExerciseDialog?.Open();
    }

    private void BeginRemoveExercise(int index)
    {
        _exerciseToRemoveIndex = index;
        _removeExerciseDialog?.Open();
    }
}
