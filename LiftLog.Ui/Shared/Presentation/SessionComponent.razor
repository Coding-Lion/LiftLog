@using LiftLog.Ui.Util
<CardList Items="Session.RecordedExercises.IndexedTuples()">
    <WeightedExercise @key=context.Index
                      RecordedExercise="context.Item"
                      ToStartNext=@(Session.NextExercise == context.Item)
                      CycleRepCountForSet=CycleRepCountForExerciseSet(context.Index)
                      UpdateWeightForExercise=UpdateWeightForExerciseWrapper(context.Index) />
</CardList>

    <div class="sticky my-2 bottom-0 flex justify-end w-full pr-4">
        <AppButton Type="AppButtonType.FloatingPrimary" OnClick=SaveSession><span class="my-2 material-symbols-outlined">save</span></AppButton>
    </div>
@if (Session.NextExercise is not null && Session.LastExercise?.LastRecordedSet is not null)
{
    var lastSetFailed = Session.LastExercise.LastRecordedSet.RepsCompleted < Session.LastExercise.Blueprint.RepsPerSet;
    <RestTimer
        Rest=Session.NextExercise.Blueprint.RestBetweenSets
        StartTime=Session.LastExercise.LastRecordedSet.CompletionTime
        Failed=lastSetFailed/>
}

@code {

    [EditorRequired]
    [Parameter]
    public Session Session { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int, int> CycleRepcountForExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int, decimal> UpdateWeightForExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action SaveSession { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action CloseSession { get; set; } = null!;

    private Action<int> CycleRepCountForExerciseSet(int exerciseIndex)
        => (int set) => CycleRepcountForExercise(exerciseIndex, set);

    private Action<decimal> UpdateWeightForExerciseWrapper(int exerciseIndex)
        => (decimal kilograms) => UpdateWeightForExercise(exerciseIndex, kilograms);

}