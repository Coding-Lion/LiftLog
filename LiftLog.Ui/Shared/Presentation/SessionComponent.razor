
@if (!Session.RecordedExercises.Any())
{
    <div class="flex flex-col justify-center items-center gap-4 my-8 text-on-surface">
        <md-icon>info</md-icon>
        <span>
            <p>Session contains no exercises.</p>
        </span>
    </div>
}
else
{
    <ItemList Items="Session.RecordedExercises.IndexedTuples()">
        <WeightedExercise
            @key=context.Index
            RecordedExercise="context.Item"
            ToStartNext=@(Session.NextExercise == context.Item)
            CycleRepCountForSet=CycleRepCountForExerciseSet(context.Index)
            ShowAdditionalActionsForSet=@(ShowAdditionalActionsForExerciseSet(context.Index))
            UpdateWeightForExercise=UpdateWeightForExerciseWrapper(context.Index)
            PreviousRecordedExercises=@(PreviouslyCompleted.GetValueOrDefault(context.Item.Blueprint, []))
            ToggleExercisePerSetWeight=@(() => ToggleExercisePerSetWeight(context.Index))
            UpdateWeightForSet=@((setIndex, weight) => UpdateWeightForSet(context.Index, setIndex, weight))
            UpdateNotesForExercise=@((notes) => UpdateNotesForExercise(context.Index, notes))
            OnEditExercise=@(() => BeginEditExercise(context.Index))
            OnRemoveExercise=@(() => BeginRemoveExercise(context.Index))
            IsReadonly=IsReadonly />
    </ItemList>
}
@if (ShowBodyweight)
{
    <Card class="flex justify-between items-center mx-2" Type=Card.CardType.Filled >
        <span class="text-xl font-bold">Bodyweight</span>
        <WeightDisplay AllowNull=true Weight=Session.Bodyweight UpdateWeight="UpdateBodyweight" Increment="0.1m" Label="Bodyweight"/>
    </Card>
}

@if (!IsReadonly)
{
    <div class="flex  justify-center gap-2 mt-6">
        @if (!SessionInPlan && Session.RecordedExercises.Any())
        {
            <AppButton Type="AppButtonType.Secondary" OnClick="@(() => _updatePlanDialog?.Open())">
                <md-icon
                    slot="icon">
                    assignment_add
                </md-icon>Update Plan
            </AppButton>
        }
    </div>
}
@if (!IsReadonly)
{
    <FloatingBottomContainer>
        <Fab>
            <FloatingButton size="small" variant="surface" aria-label="Add Exercise" label="Add Exercise" OnClick="BeginAddExercise"><md-icon slot="icon">add</md-icon></FloatingButton>
        </Fab>
        <AdditionalContent>@RenderSnackBar()</AdditionalContent>
    </FloatingBottomContainer>
}
else
{
    <FloatingBottomContainer>
        <AdditionalContent>@RenderSnackBar()</AdditionalContent>
    </FloatingBottomContainer>
}

@if(IsInActiveScreen && !IsReadonly)
{
    <Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="TrailingTitleButton">
        <AppButton class="text-lg" Type=AppButtonType.Text OnClick=SaveSession>Finish</AppButton>
    </Microsoft.AspNetCore.Components.Sections.SectionContent>
}

<FullScreenDialog @ref=_editExerciseDialog Title=@(_exerciseToEditIndex is null ? "Add Exercise" : "Edit Exercise") Action="Update" OnAction="EditExerciseHandler" OnClose="@(() => _exerciseToEditIndex = null)">
        <ExerciseEditor Exercise="editingExerciseBlueprint" UpdateExercise="(ex) => {editingExerciseBlueprint = ex; StateHasChanged();}" />
</FullScreenDialog>

<Dialog @ref="setAdditionalActionsDialog">
    @if(setAdditionalActions != null)
    {
        var exercise = Session.RecordedExercises[setAdditionalActions.Value.ExerciseIndex];
        var set = exercise.PotentialSets[setAdditionalActions.Value.PotentialSetIndex];
        <span slot="headline">Additional Actions</span>
        <span slot="content" >
        <PotentialSetAdditionalActions
            Set="set"
            MaxReps=exercise.Blueprint.RepsPerSet
            OnSelectRepCount="@((reps)=>{
                SetRepCountForExercise(setAdditionalActions.Value.ExerciseIndex, setAdditionalActions.Value.PotentialSetIndex,reps);
                setAdditionalActionsDialog?.Close();
                })"
            OnDeleteSet=@(()=>{})></PotentialSetAdditionalActions>
        </span>
    }
</Dialog>


<Dialog @ref="_removeExerciseDialog">
    <span slot="headline">Remove Exercise?</span>
    <span slot="content" class="block text-left">
        Exercise will be removed from the current session, future sessions will
        not be impacted.
    </span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" slot="footer" OnClick="() => { _removeExerciseDialog?.Close(); }">Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" slot="footer" OnClick="RemoveExerciseHandler">Remove</AppButton>
    </div>
</Dialog>

<Dialog @ref="_updatePlanDialog">
    <span slot="headline">Update Plan</span>
    <span slot="content" class="block text-left">
        The plan will be updated with the current session's exercises.
        @if (SessionWithSameNameInPlan)
        {
            <span>Would you like to update the existing session <span class="font-bold text-primary">@Session.Blueprint.Name</span>, or add a new session?</span>
        }
    </span>
    <div slot="actions">
        <div class="flex justify-between flex-grow">
            <AppButton Type="AppButtonType.Text" slot="footer" OnClick="@(() => _updatePlanDialog?.Close())">Cancel</AppButton>
            <div>
                <AppButton Type="AppButtonType.Text" slot="footer" OnClick="HandleAddAsNewSession">Add</AppButton>
                @if (SessionWithSameNameInPlan)
                {
                    <AppButton Type="AppButtonType.Text" slot="footer" OnClick="HandleUpdateInPlan">
                        <span>Update</span>
                    </AppButton>
                }
            </div>
        </div>
    </div>
</Dialog>

@code {

    private ExerciseBlueprint editingExerciseBlueprint = new ExerciseBlueprint(
        Name: "",
        Sets: 3,
        RepsPerSet: 10,
        WeightIncreaseOnSuccess: 0,
        RestBetweenSets: Rest.Medium,
        SupersetWithNext: false
    );

    private (int ExerciseIndex, int PotentialSetIndex)? setAdditionalActions;
    private int? _exerciseToEditIndex;
    private int? _exerciseToRemoveIndex;
    private FullScreenDialog? _editExerciseDialog;
    private Dialog? _removeExerciseDialog;
    private Dialog? _updatePlanDialog;
    private Dialog? setAdditionalActionsDialog;

    [EditorRequired] [Parameter] public Session Session { get; set; } = null!;

    [EditorRequired] [Parameter] public ImmutableDictionary<KeyedExerciseBlueprint, ImmutableListValue<DatedRecordedExercise>> PreviouslyCompleted { get; set; } = null!;

    [Parameter] public bool ShowRestTimer { get; set; } = true;

    [EditorRequired] [Parameter] public Action<int, int> CycleRepcountForExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<int, int, int?> SetRepCountForExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<int, decimal> UpdateWeightForExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<int, string?> UpdateNotesForExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<int> ToggleExercisePerSetWeight { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<int, int, decimal> UpdateWeightForSet { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<decimal?> UpdateBodyweight { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<int, ExerciseBlueprint> EditExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<ExerciseBlueprint> AddExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<int> RemoveExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action SaveSession { get; set; } = null!;

    [EditorRequired] [Parameter] public Action CloseSession { get; set; } = null!;

    [Parameter] [EditorRequired] public bool SessionInPlan { get; set; }

    [Parameter] [EditorRequired] public bool SessionWithSameNameInPlan { get; set; }

    [Parameter] [EditorRequired] public Action AddSessionToPlan { get; set; } = null!;

    [Parameter] [EditorRequired] public Action UpdateSessionInPlan { get; set; } = null!;

    [Parameter] [EditorRequired] public bool ShowBodyweight { get; set; }

    [Parameter] public bool IsReadonly { get; set; } = false;

    [Parameter] public string? Username { get; set; }

    [CascadingParameter(Name = "IsInActiveScreen")]
    public bool IsInActiveScreen { get; set; }

    private Action<int> CycleRepCountForExerciseSet(int exerciseIndex)
        => (int set) => CycleRepcountForExercise(exerciseIndex, set);


    private Action<int> ShowAdditionalActionsForExerciseSet(int exerciseIndex)
        => (int setIndex) =>
        {
            setAdditionalActions = (exerciseIndex, setIndex);
            setAdditionalActionsDialog?.Open();
        };



    private Action<decimal> UpdateWeightForExerciseWrapper(int exerciseIndex)
        => (decimal weight) => UpdateWeightForExercise(exerciseIndex, weight);

    private void EditExerciseHandler()
    {
        if (editingExerciseBlueprint is not null)
        {
            if (_exerciseToEditIndex is not null)
            {
                EditExercise(_exerciseToEditIndex.Value, editingExerciseBlueprint);
                _exerciseToEditIndex = null;
            }
            else
            {
                AddExercise(editingExerciseBlueprint);
            }
        }

        _editExerciseDialog?.Close();
    }

    private void RemoveExerciseHandler()
    {
        if (_exerciseToRemoveIndex is not null)
        {
            RemoveExercise(_exerciseToRemoveIndex.Value);
            _exerciseToRemoveIndex = null;
        }

        _removeExerciseDialog?.Close();
    }

    private void BeginAddExercise()
    {
        editingExerciseBlueprint = new ExerciseBlueprint(
            Name: "",
            Sets: 3,
            RepsPerSet: 10,
            WeightIncreaseOnSuccess: 0,
            RestBetweenSets: Rest.Medium,
            SupersetWithNext: false
        );
        _editExerciseDialog?.Open();
    }

    private void HandleAddAsNewSession()
    {
        AddSessionToPlan();
        _updatePlanDialog?.Close();
    }

    private void HandleUpdateInPlan()
    {
        UpdateSessionInPlan();
        _updatePlanDialog?.Close();
    }

    private void BeginEditExercise(int index)
    {
        var exercise = Session.RecordedExercises[index];
        _exerciseToEditIndex = index;
        editingExerciseBlueprint = exercise.Blueprint;
        StateHasChanged();
        _editExerciseDialog?.Open();
    }

    private void BeginRemoveExercise(int index)
    {
        _exerciseToRemoveIndex = index;
        _removeExerciseDialog?.Open();
    }

    private RenderFragment? RenderSnackBar()
    {
        var lastRecordedSet = Session.LastExercise?.LastRecordedSet;
        if (ShowRestTimer
            && Session.NextExercise is not null
            && Session.LastExercise is not null
            && lastRecordedSet is { Set : not null } lrs)
        {
            var lastSetFailed = lrs.Set.RepsCompleted < Session.LastExercise.Blueprint.RepsPerSet;

            return @<RestTimer
                        Rest="Session.LastExercise.Blueprint.RestBetweenSets"
                        StartTime="lrs.Set.CompletionTime"
                        Failed="lastSetFailed"/>;
        }
        else if (Session.IsComplete || IsReadonly)
        {
            return @<SnackBar>
                <span class="flex flex-col justify-start">
                    <span class="flex justify-between">
                        <span>This session
                            @if(Username is not null)
                            {
                                <span class="font-bold">@Username</span>
                            } else{
                                @("you");
                            } lifted </span>
                        <span class="font-bold">
                            <WeightFormat Weight="Session.TotalWeightLifted"/>
                        </span>
                    </span>
                </span>
            </SnackBar>;
        }

        return null;
    }

}
