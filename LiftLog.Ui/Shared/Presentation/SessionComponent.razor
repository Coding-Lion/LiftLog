@using LiftLog.Ui.Util
<CardList Items="Session.RecordedExercises.IndexedTuples()">
    <WeightedExercise @key=context.Index
                      RecordedExercise="context.Item"
                      ToStartNext=@(Session.NextExercise == context.Item)
                      CycleRepCountForSet=CycleRepCountForExerciseSet(context.Index)
                      ClearRepCountForSet=ClearRepCountForExerciseSet(context.Index)
                      UpdateWeightForExercise=UpdateWeightForExerciseWrapper(context.Index) />
</CardList>
<div class="sticky bottom-0 flex flex-col pointer-events-none">
    <div class="flex justify-end w-full mt-2 mb-2">
        <AppButton Type="AppButtonType.FloatingPrimary" OnClick=SaveSession><md-icon slot="icon">save</md-icon>Save</AppButton>
    </div>
    @if (Session.NextExercise is not null && Session.LastExercise?.LastRecordedSet is not null)
    {
        var lastSetFailed = Session.LastExercise.LastRecordedSet.RepsCompleted < Session.LastExercise.Blueprint.RepsPerSet;
        <RestTimer
            Rest=Session.NextExercise.Blueprint.RestBetweenSets
            StartTime=Session.LastExercise.LastRecordedSet.CompletionTime
            Failed=lastSetFailed/>
    }
</div>
@code {

    [EditorRequired]
    [Parameter]
    public Session Session { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int, int> CycleRepcountForExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int, int> ClearRepCountForExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int, decimal> UpdateWeightForExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action SaveSession { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action CloseSession { get; set; } = null!;

    private Action<int> CycleRepCountForExerciseSet(int exerciseIndex)
        => (int set) => CycleRepcountForExercise(exerciseIndex, set);


    private Action<int> ClearRepCountForExerciseSet(int exerciseIndex)
        => (int set) => ClearRepCountForExercise(exerciseIndex, set);

    private Action<decimal> UpdateWeightForExerciseWrapper(int exerciseIndex)
        => (decimal kilograms) => UpdateWeightForExercise(exerciseIndex, kilograms);

}
