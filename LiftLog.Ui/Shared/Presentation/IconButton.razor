@switch (Type)
{
    case IconButtonType.Filled:
        <md-filled-icon-button class="pointer-events-auto"  @onclick="OnClick" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true" style="">@ChildContent</md-filled-icon-button>
        break;
    case IconButtonType.FilledTonal:
        <md-filled-tonal-icon-button class="pointer-events-auto"  @onclick="OnClick" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true" style="">@ChildContent</md-filled-tonal-icon-button>
        break;
    case IconButtonType.Outlined:
        <md-outlined-icon-button class="pointer-events-auto"  @onclick="OnClick" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true" style="">@ChildContent</md-outlined-icon-button>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}


@code {

    [EditorRequired]
    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public IconButtonType Type { get; set; } = IconButtonType.Filled;

    [Parameter]
    public bool Disabled { get; set; }
}
