@switch (Type)
{
    case IconButtonType.Standard:
        <md-icon-button
            @attributes="AdditionalAttributes"
            @onpointerdown="OnPointerDown"
            @onpointerleave="OnPointerLeave"
            @onpointerup="OnPointerUp" class="pointer-events-auto" @onclick="OnClick" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true"

  @oncontextmenu:stopPropagation="true"
  @oncontextmenu:preventDefault="true"
  @onpointercancel:stopPropagation="true"
  @onpointercancel:preventDefault="true"
  @onpointerdown:stopPropagation="true"
  @onpointerdown:preventDefault="true"
  @onpointerenter:stopPropagation="true"
  @onpointerenter:preventDefault="true"
  @onpointerleave:stopPropagation="true"
  @onpointerleave:preventDefault="true"
  @onpointerup:stopPropagation="true"
  @onpointerup:preventDefault="true"
  >
            <md-icon>@Icon</md-icon>
        </md-icon-button>
        break;
    case IconButtonType.Filled:
        <md-filled-icon-button
            @attributes="AdditionalAttributes"
            @onpointerdown="OnPointerDown"
            @onpointerleave="OnPointerLeave"
            @onpointerup="OnPointerUp" class="pointer-events-auto" @onclick="OnClick" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true">
            <md-icon>@Icon</md-icon>
        </md-filled-icon-button>
        break;
    case IconButtonType.FilledTonal:
        <md-filled-tonal-icon-button
            @attributes="AdditionalAttributes"
            @onpointerdown="OnPointerDown"
            @onpointerleave="OnPointerLeave"
            @onpointerup="OnPointerUp" class="pointer-events-auto" @onclick="OnClick" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true">
            <md-icon>@Icon</md-icon>
        </md-filled-tonal-icon-button>
        break;
    case IconButtonType.Outlined:
        <md-outlined-icon-button
            @attributes="AdditionalAttributes"
            @onpointerdown="OnPointerDown"
            @onpointerleave="OnPointerLeave"
            @onpointerup="OnPointerUp" class="pointer-events-auto" @onclick="OnClick" disabled=@Disabled @onclick:stopPropagation="true" @onclick:preventDefault="true">
            <md-icon>@Icon</md-icon>
        </md-outlined-icon-button>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}


@code {

    [EditorRequired] [Parameter] public string Icon { get; set; } = null!;

    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter] public EventCallback<PointerEventArgs> OnStartHold { get; set; }

    [Parameter] public EventCallback<PointerEventArgs> OnEndHold { get; set; }

    [Parameter] public IconButtonType Type { get; set; } = IconButtonType.Filled;

    [Parameter] public bool Disabled { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private void OnPointerDown(PointerEventArgs args)
    {
        OnStartHold.InvokeAsync(args);
    }

    private void OnPointerLeave(PointerEventArgs args)
    {
        OnEndHold.InvokeAsync(args);
    }

    private void OnPointerUp(PointerEventArgs args)
    {
        OnEndHold.InvokeAsync(args);
    }

}
