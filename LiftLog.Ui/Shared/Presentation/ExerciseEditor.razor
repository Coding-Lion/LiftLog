<TextField
    data-cy="exercise-name"
    TextFieldType="TextFieldType.Outline"
    class="w-full mb-2 text-xl"
    Label="Exercise Name"
    Value="@Exercise.Name"
    OnChange="val => SetExerciseName(val)" >
</TextField>
<div class="flex flex-wrap justify-around w-full gap-4">
    <div class="flex flex-col items-center gap-1">
        <FixedIncrementer
            data-cy="exercise-sets"
            Value="Exercise.Sets"
            Increment="() => IncrementExerciseSets()"
            Decrement="() => DecrementExerciseSets()"
            Label="Sets"
        />
        <FixedIncrementer
            data-cy="exercise-reps"
            Value="Exercise.RepsPerSet"
            Increment="() => IncrementExerciseRepsPerSet()"
            Decrement="() => DecrementExerciseRepsPerSet()"
            Label="Reps"
        />
    </div>
    <EditableIncrementer
        Increment=@Math.Max(Exercise.WeightIncreaseOnSuccess, 0.1m)
        Label="Initial Weight"
        data-cy="exercise-initial-weight"
        Value=@Exercise.InitialWeight
        OnChange="e => SetExerciseInitialWeight(e)"
    />
    <EditableIncrementer
        Increment="0.1m"
        Label="Auto Increase"
        data-cy="exercise-auto-increase"
        Value="Exercise.WeightIncreaseOnSuccess"
        OnChange="e => SetExerciseSuccessWeight(e)"/>

    <Switch Label="Superset With Next Exercise" data-cy="exercise-superset" Value=Exercise.SupersetWithNext OnSwitched="supersets=>SetExerciseSupersetsNext(supersets)"/>

    <RestEditorGroup Rest="Exercise.RestBetweenSets" OnRestUpdated="rest => OnRestUpdated(rest)"/>
</div>

@code
{
    [Parameter]
    [EditorRequired]
    public Action<ExerciseBlueprint> UpdateExercise { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public ExerciseBlueprint Exercise { get; set; } = null!;

    void DecrementExerciseSets() => UpdateExercise(Exercise with { Sets = Math.Max(Exercise.Sets - 1, 1) });

    void IncrementExerciseSets() => UpdateExercise(Exercise with { Sets = Exercise.Sets + 1 });

    void DecrementExerciseRepsPerSet() => UpdateExercise(Exercise with { RepsPerSet = Math.Max(Exercise.RepsPerSet - 1, 1) });

    void IncrementExerciseRepsPerSet() => UpdateExercise(Exercise with { RepsPerSet = Exercise.RepsPerSet + 1 });

    void SetExerciseName( string name) => UpdateExercise(Exercise with { Name = name });

    void SetExerciseSupersetsNext( bool supersets)
        => UpdateExercise(Exercise with { SupersetWithNext = supersets });


    void SetExerciseInitialWeight(decimal initialWeight)
        => UpdateExercise(Exercise with { InitialWeight = initialWeight});

    void SetExerciseSuccessWeight(decimal weight)
        => UpdateExercise(Exercise with { WeightIncreaseOnSuccess = weight });

    void OnRestUpdated(Rest rest) => UpdateExercise(Exercise with { RestBetweenSets = rest });

}
