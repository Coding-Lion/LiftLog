<div class="flex flex-col gap-4">
<TextField
    data-cy="exercise-name"
    TextFieldType="TextFieldType.Filled"
    class="w-full mb-2 text-xl text-start"
    Label="Exercise"
    Value="@Exercise.Name"
    required
    OnChange="@(val => SetExerciseName(val!))">
</TextField>
<div class="flex flex-wrap justify-around w-full gap-4">
    <div class="flex items-center w-full gap-4">
        <Card HasPadding=false Type=Card.CardType.Filled class="flex-grow py-5 flex-1 flex justify-center">
            <FixedIncrementer
                data-cy="exercise-sets"
                Value="Exercise.Sets"
                Increment="() => IncrementExerciseSets()"
                Decrement="() => DecrementExerciseSets()"
                Label="Sets"/>
        </Card>
        <Card HasPadding=false Type=Card.CardType.Filled class="flex-grow py-5 flex flex-1 justify-center">
            <FixedIncrementer
                data-cy="exercise-reps"
                Value="Exercise.RepsPerSet"
                Increment="() => IncrementExerciseRepsPerSet()"
                Decrement="() => DecrementExerciseRepsPerSet()"
                Label="Reps"/>
        </Card>
    </div>
    <Card Type=Card.CardType.Elevated class="w-full flex flex-col gap-6 items-start">
        <div class="-mr-2">
            <EditableIncrementer
                Increment="0.1m"
                Label="Progressive Overload"
                data-cy="exercise-auto-increase"
                Suffix=@WeightSuffix
                Value="Exercise.WeightIncreaseOnSuccess"
                OnChange="e => SetExerciseSuccessWeight(e)"/>
        </div>
        <md-divider></md-divider>

        <div class="w-full">
            <Switch Label="Superset next exercise" data-cy="exercise-superset" Value="Exercise.SupersetWithNext" OnSwitched="supersets => SetExerciseSupersetsNext(supersets)"/>
        </div>

        <md-divider></md-divider>

        <RestEditorGroup Rest="Exercise.RestBetweenSets" OnRestUpdated="rest => OnRestUpdated(rest)"/>
    </Card>
</div>
</div>

@code
{
    [Parameter] [EditorRequired] public Action<Func<ExerciseBlueprint, ExerciseBlueprint>> UpdateExercise { get; set; } = null!;

    [Parameter] [EditorRequired] public ExerciseBlueprint Exercise { get; set; } = null!;

    [CascadingParameter(Name = "UseImperial")]
    public bool UseImperialUnits { get; set; }

    private string WeightSuffix => UseImperialUnits ? "lbs" : "kg";

    void DecrementExerciseSets() => UpdateExercise(e=> e with { Sets = Math.Max(e.Sets - 1, 1) });

    void IncrementExerciseSets() => UpdateExercise(e=> e with { Sets = e.Sets + 1 });

    void DecrementExerciseRepsPerSet() => UpdateExercise(e=> e with { RepsPerSet = Math.Max(e.RepsPerSet - 1, 1) });

    void IncrementExerciseRepsPerSet() => UpdateExercise(e=> e with { RepsPerSet = e.RepsPerSet + 1 });

    void SetExerciseName(string name) => UpdateExercise(e=> e with { Name = name });

    void SetExerciseSupersetsNext(bool supersets)
        => UpdateExercise(e=> e with { SupersetWithNext = supersets });

    void SetExerciseSuccessWeight(decimal weight)
        => UpdateExercise(e=> e with { WeightIncreaseOnSuccess = weight });

    void OnRestUpdated(Rest rest) => UpdateExercise(e=> e with { RestBetweenSets = rest });

}
