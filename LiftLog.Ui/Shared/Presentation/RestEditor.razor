<input type="text" inputmode="numeric" class="w-20 text-center" value="@Rest.Minutes" @onchange="OnMinutesChange"/><span class="self-center text-xl font-bold text-on-secondary-container">:</span>
<input type="text" inputmode="numeric" class="w-20 text-center" value=@(Rest.Seconds.ToString("00")) @onchange="OnSecondsChange"/>

@code {

    [EditorRequired]
    [Parameter]
    public Action<TimeSpan> OnRestUpdated { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public TimeSpan Rest { get; set; }

    private string? MinutesError { get; set; }
    private string? SecondsError { get; set; }

    private void OnMinutesChange(ChangeEventArgs e)
    {
        var value = e.Value;
        if (value is not string valueStr || !int.TryParse(valueStr, out var valueMins))
        {
            MinutesError = "Minutes must be a whole number";
            return;
        }
        if (valueMins is < 0 or > 60)
        {
            MinutesError = "Minutes must be between 0 and 60";
            return;
        }
        MinutesError = null;
        var updatedRest = new TimeSpan(
            days: 0,
            hours: 0,
            minutes: valueMins,
            seconds: Rest.Seconds,
            milliseconds: 0,
            microseconds: 0);
        OnRestUpdated(updatedRest);
    }
    private void OnSecondsChange(ChangeEventArgs e)
    {
        var value = e.Value;
        if (value is not string valueStr || !int.TryParse(valueStr, out var valueSecs)){
            SecondsError = "Seconds must be a whole number";
            return;
        }
        if (valueSecs is < 0 or > 60)
        {
            SecondsError = "Seconds must be between 0 and 60";
            return;
        }
        SecondsError = null;
        var updatedRest = new TimeSpan(
            days: 0,
            hours: 0,
            minutes: Rest.Minutes,
            seconds: valueSecs,
            milliseconds: 0,
            microseconds: 0);
        OnRestUpdated(updatedRest);
    }

}
