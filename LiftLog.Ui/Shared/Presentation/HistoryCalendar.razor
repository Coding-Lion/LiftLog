@using System.Globalization


@{
    var firstDayOfMonth = new DateTime(_currentYear, _currentMonth, 1);
    var firstDayOfWeek = (int)firstDayOfMonth.DayOfWeek;
    var lastDayOfPreviousMonth = firstDayOfMonth.AddDays(-1);
}
<div class="grid grid-cols-7 gap-2">
    <div class="col-span-1 my-2">
        <IconButton Type=IconButtonType.Standard @onclick="PreviousMonth" Icon="chevron_left" />
    </div>
    <div class="col-span-5 flex my-2 justify-center items-center">
        <h2>@DateTimeFormatInfo.CurrentInfo.GetMonthName(_currentMonth) @_currentYear</h2>
    </div>
    <div class="col-span-1 my-2 text-right">
        <IconButton Type=IconButtonType.Standard @onclick="NextMonth" disabled=@DisableNext Icon="chevron_right" />
    </div>

    <span class="mb-2">@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Sunday))</span>
    <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Monday))</span>
    <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Tuesday))</span>
    <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Wednesday))</span>
    <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Thursday))</span>
    <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Friday))</span>
    <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Saturday))</span>
    @for (int i = 0; i < firstDayOfWeek; i++)
    {
        @RenderDay(lastDayOfPreviousMonth.AddDays(-i))
    }
    @for (int i = 1; i <= DateTime.DaysInMonth(_currentYear, _currentMonth); i++)
    {
        var date = new DateTime(_currentYear, _currentMonth, i);

        @RenderDay(date)
    }

</div>

@code {
    private int _currentMonth = DateTime.Now.Month;
    private int _currentYear = DateTime.Now.Year;

    private ILookup<DateOnly, Session> _sessionsByDate = null!;

    private bool DisableNext => _currentYear == DateTime.Now.Year && _currentMonth == DateTime.Now.Month;

    [Parameter]
    [EditorRequired]
    public IReadOnlyList<Session> Sessions { get; set; } = [];

    [Parameter]
    [EditorRequired]
    public EventCallback<Session> OnSessionClick { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _sessionsByDate = Sessions.ToLookup(s => s.Date);
    }

    private void NextMonth()
    {
        if (_currentMonth == 12)
        {
            _currentMonth = 1;
            _currentYear++;
        }
        else
        {
            _currentMonth++;
        }
    }

    private void PreviousMonth()
    {
        if (_currentMonth == 1)
        {
            _currentMonth = 12;
            _currentYear--;
        }
        else
        {
            _currentMonth--;
        }
    }

    private void GoToToday()
    {
        _currentMonth = DateTime.Now.Month;
        _currentYear = DateTime.Now.Year;
    }

    private RenderFragment RenderDay(DateTime date)
    {
        var sessions = _sessionsByDate[DateOnly.FromDateTime(date)];
        var hasSessions = sessions.Any();
        var isToday = date.Date == DateTime.Today;

        var hasSessionsClass = hasSessions ? "bg-primary rounded-full text-on-primary" : "";

        return @<div class="flex justify-center items-center">
                <button @onclick=@(()=>HandleDayClick(date)) class="@hasSessionsClass flex items-center justify-center w-12 aspect-square relative" >
                    @date.Day
                    @if(hasSessions){
                        <md-ripple></md-ripple>
                    }
                </button>

            </div>;
    }

    private async Task HandleDayClick(DateTime date)
    {
        var sessions = _sessionsByDate[DateOnly.FromDateTime(date)];
        if (sessions.Count() == 1)
        {
            await OnSessionClick.InvokeAsync(sessions.First());
        }
        else if (sessions.Count() > 1)
        {
            // Show sessions
        }
    }

}
