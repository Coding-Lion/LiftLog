@using ApexCharts;
@using LiftLog.Ui.Services;
@using MaterialColorUtilities.Utils;

@inject IThemeProvider ThemeProvider

<h2 class="text-xl text-on-surface">@(ExerciseStatistics.Name)</h2>
@if(IsLoading){
<div class="flex flex-col justify-center h-full gap-4 text-on-surface">
    <div><md-circular-progress aria-label="Stats progress" indeterminate four-color></md-circular-progress></div>
    <span>
        <p>Loading...</p>
    </span>
</div>
}else{
<ApexChart
    TItem="RecordedExercise"
    Title=""
    Options="options"
    XAxisType="XAxisType.Datetime">

    <ApexPointSeries TItem="RecordedExercise"
                        Items="ExerciseStatistics.RecordedExercises.Where(x=>x.LastRecordedSet != null)"
                        Name="Gross Value"
                        SeriesType="SeriesType.Line"
                        XValue="@(e => e.LastRecordedSet!.CompletionTime)"
                        YAggregate="@(e => e.Average(e => e.Kilograms))"
                        OrderByDescending="e=>e.X" />
</ApexChart>
}
@code {
    [Parameter]
    [EditorRequired]
    public ExerciseStatistics ExerciseStatistics { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    // Loading lots of graphs at once can be slow, so we can delay the rendering of this graph
    public TimeSpan RenderDelay { get; set; }

    private bool IsLoading { get; set; } = true;


    private ApexChartOptions<RecordedExercise> options = null!;

    protected override void OnInitialized()
    {
        Task.Delay(RenderDelay).ContinueWith(_ => {IsLoading = false; InvokeAsync(StateHasChanged);});
        options = new ApexChartOptions<RecordedExercise>
            {
                Chart = new Chart
                {
                    Toolbar = new Toolbar
                    {
                        Show = false
                    },
                    Selection = new(){
                        Enabled = false,
                    },
                    Zoom = new(){
                        Enabled = false,
                    },

                },
                Stroke = new Stroke
                {
                    Curve = Curve.Straight,
                    Width = 4
                },
                Colors = new() {GetColorString(ThemeProvider.GetColorScheme().Primary)},
                Title = new(){
                    Style = new (){
                        Color = GetColorString(ThemeProvider.GetColorScheme().OnSurface),
                    }
                },
                Xaxis = new(){
                    Labels = new(){
                        Style = new(){
                            Colors = new Color(GetColorString(ThemeProvider.GetColorScheme().OnSurface)),
                        }
                    },
                    AxisBorder = new(){
                        Color = GetColorString(ThemeProvider.GetColorScheme().OutlineVariant),
                    },
                },
                Yaxis = new(){
                      new(){
                        Labels = new(){
                            Style = new(){
                                Colors = new Color(GetColorString(ThemeProvider.GetColorScheme().OnSurface)),
                            },
                            Formatter = "(value)=>parseFloat(value) + ' kg'",
                        },
                      }
                },
                Tooltip = new(){
                    Enabled =false
                },
                Grid = new(){
                    BorderColor = GetColorString(ThemeProvider.GetColorScheme().OutlineVariant),
                },
                Markers = new(){
                    Size = 2,
                    StrokeColors = new Color(GetColorString(ThemeProvider.GetColorScheme().Primary)),
                    StrokeWidth = 4,
                }
            };
    }

    private string GetColorString(uint color) => "#"+color.ToString("X").Substring(2,6);
}
