<div @attributes="AdditionalAttributes" class="flex flex-col gap-2 @(AdditionalAttributes?.GetValueOrDefault("class"))">
    <label class="text-lg text-center">@Label</label>
    <div class="flex items-center justify-center gap-2">
        <IconButton Type=IconButtonType.Outlined OnClick=@(()=>{OnChange(Value - Increment);}) Icon="remove" />
        <TextField class="w-20" type="text" inputmode="numeric" Value=@(Value.ToString()) OnChange=@(value =>
            OnChanged(value)) />
        <IconButton Type=IconButtonType.Outlined OnClick=@(()=>{OnChange(Value + Increment);}) Icon="add" />
    </div>
</div>

@code
{

    [Parameter]
    [EditorRequired]
    public decimal Value { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public decimal Increment { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public string Label { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public Action<decimal> OnChange { get; set; } = null!;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private void OnChanged(string value)
    {
        if (value is string valueStr
        && decimal.TryParse(valueStr, System.Globalization.NumberStyles.Any,
        System.Globalization.CultureInfo.CurrentCulture, out var result))
        {
            OnChange(result);
        }
    }
}
