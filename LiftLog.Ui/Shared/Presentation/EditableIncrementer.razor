@typeparam T where T : System.Numerics.INumber<T>

<div @attributes="AdditionalAttributes" class="flex justify-between items-center w-full @(AdditionalAttributes?.GetValueOrDefault("class"))">
    <label class="text-lg text-start">@Label</label>
    <div class="flex items-center justify-center">
        <IconButton data-cy="editable-decrement" Type="IconButtonType.Standard" OnClick="@(() => { OnChange(Value - Increment); })" Icon="remove"/>
        <TextField suffix-text="@Suffix" TextFieldType=TextFieldType.Filled data-cy="editable-field" class="w-20" type="text" inputmode="decimal" Value="@(Value.ToString())" OnChange="@(value => OnChanged(value))"/>
        <IconButton data-cy="editable-increment" Type="IconButtonType.Standard" OnClick="@(() => { OnChange(Value + Increment); })" Icon="add"/>
    </div>
</div>

@code
{
    [Parameter] [EditorRequired] public T Value { get; set; } = default!;

    [Parameter] [EditorRequired] public T Increment { get; set; } = default!;

    [Parameter] [EditorRequired] public string Label { get; set; } = null!;

    [Parameter] [EditorRequired] public Action<T> OnChange { get; set; } = null!;

    [Parameter] public string? Suffix { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private void OnChanged(string? value)
    {
        if (value != null && T.TryParse(value, System.Globalization.NumberStyles.Float,
                System.Globalization.CultureInfo.CurrentCulture, out var result))
        {
            OnChange(result);
        }
    }
}
