@inject IJSRuntime Js

<h2 class="text-2xl">How many @WeightUnit do you weigh?</h2>
<div class="overflow-hidden">
    <ol @ref=_scrollContainer @onscroll="OnScroll" class="w-full h-full overflow-auto text-5xl select-none snap-mandatory snap-y"  style="mask:linear-gradient(rgba(0, 0, 0, 0) 5%, rgba(0, 0, 0, 1) 50%, rgba(0, 0, 0, 0) 95%, rgba(0, 0, 0, 0) 0)">
        <div class="h-[45%]"></div>
        @for (var weight = 20m; weight < 500; weight += 5)
        {
            var weightRange = $"{weight}-{weight + 5}";
            <li @onclick="()=>OnClick(weightRange)" class="snap-center @(_weightRange==weightRange ? "text-primary":"")" data-weight="@weightRange">@weightRange</li>
        }
        <div class="h-[45%]"></div>
    </ol>
</div>
@code {


    [Parameter][EditorRequired] public Action<string> OnWeightSelect { get; set; } = null!;

    [CascadingParameter(Name="UseImperial")]
    public bool UseImperial { get; set; }

    private string _weightRange = "20-25";

    private ElementReference _scrollContainer;

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender) { OnWeightSelect(_weightRange); }
        base.OnAfterRender(firstRender);
    }

    private async void OnScroll()
    {
        _weightRange = await Js.InvokeAsync<string>("AppUtils.getMiddleElementAttribute", _scrollContainer, "data-weight");
        OnWeightSelect(_weightRange);
        StateHasChanged();
    }

    private async Task OnClick(string weightRange)
    {
        await Js.InvokeVoidAsync("AppUtils.scrollElementToMiddle", $"[data-weight='{weightRange}']");
    }

    private string WeightUnit => UseImperial ? "pounds" : "kilograms";
}
