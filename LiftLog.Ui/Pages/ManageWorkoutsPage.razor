@using Fluxor
@using LiftLog.Ui.Store.Program
@using LiftLog.Ui.Store.SessionEditor

@page "/manage-workouts"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<ProgramState> ProgramState
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher

<div class="flex">
    <button @onclick="BackToSettings" class="m-1">&lt;</button>
    <h3>Manage Workouts</h3>
</div>
@foreach (var (session, index) in ProgramState.Value.SessionBlueprints.IndexedTuples())
{
    <Card @onclick=@(() => SelectSession(session, index))>
        <span class="text-xl">@session.Name</span>
        <AppButton Type="AppButtonType.OutlineSecondary" onclick=@(() => MoveSessionUp(session))>‚¨ÜÔ∏è</AppButton>
        <AppButton Type="AppButtonType.OutlineSecondary" onclick=@(() => MoveSessionDown(session))>‚¨áÔ∏è</AppButton>
        <AppButton Type="AppButtonType.OutlineSecondary" onclick=@(() => RemoveSession(session))>üóëÔ∏è</AppButton>
        @foreach (var exercise in session.Exercises)
        {
            <div class="flex justify-between w-full">
                <span>@exercise.Name</span>
                <span> @exercise.Sets x @exercise.RepsPerSet</span>
            </div>
        }
    </Card>
}

<AppButton Type="AppButtonType.OutlineSecondary" onclick="AddSession">Add Session</AppButton>

@code {

    void MoveSessionUp(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(new MoveSessionBlueprintUpInProgramAction(sessionBlueprint));

    void MoveSessionDown(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(new MoveSessionBlueprintDownInProgramAction(sessionBlueprint));
    
    void RemoveSession(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(new RemoveSessionFromProgramAction(sessionBlueprint));

    void BackToSettings() => NavigationManager.NavigateTo("/settings");

    void SelectSession(SessionBlueprint sessionBlueprint, int index)
    {
        Dispatcher.Dispatch(new SetEditingSessionAction(sessionBlueprint));
        NavigationManager.NavigateTo($"/manage-session/{index}");
    }

    void AddSession() => Dispatcher.Dispatch(
        new AddProgramSessionAction(
            new SessionBlueprint($"Session {ProgramState.Value.SessionBlueprints.Count + 1}", new ImmutableListSequence<ExerciseBlueprint>())));

}