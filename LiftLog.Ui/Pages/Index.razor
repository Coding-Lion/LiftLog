@using Fluxor;
@using LiftLog.Ui.Store.App;
@using LiftLog.Ui.Store.CurrentSession;
@using System.Diagnostics;
@using LiftLog.Ui.Services;

@page "/"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IDispatcher Dispatcher
@inject NavigationManager NavigationManager
@inject SessionService SessionService

@if(_upcomingSessions.Count == 0)
{
    <div class="flex flex-col justify-center h-full gap-2 text-on-surface">
        <span>No plan created yet!</span>
        <div class="flex justify-center">
            <AppButton OnClick=@(()=>NavigationManager.NavigateTo("/settings"))><md-icon slot="icon">add</md-icon>Create Plan</AppButton>
        </div>
    </div>
}else{
<CardList Items="_upcomingSessions.IndexedTuples()" OnClick="x=>SelectSession(x.Item)" ShouldHighlight="session => session.Index == 0">
       <SessionSummary IsFilled="context.Item.IsStarted" Session="context.Item" ></SessionSummary>
</CardList>
}

@code {

    private IReadOnlyList<Session> _upcomingSessions = new List<Session>();

    protected override async Task OnInitializedAsync()
    {
        var sw = Stopwatch.StartNew();
        Dispatcher.Dispatch(new SetPageTitleAction("Upcoming Workouts"));
        this._upcomingSessions = await SessionService
            .GetUpcomingSessionsAsync()
            .Take(3)
            .ToListAsync();
        await base.OnInitializedAsync();
        sw.Stop();
        Console.WriteLine($"Index.OnInitializedAsync took {sw.ElapsedMilliseconds}ms");
    }

    private void SelectSession(Session session)
    {
        Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget.WorkoutSession, session));
        NavigationManager.NavigateTo("/session");
    }
}
