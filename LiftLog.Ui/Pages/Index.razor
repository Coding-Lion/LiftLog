@using Fluxor;
@using LiftLog.Ui.Store.App;
@using LiftLog.Ui.Store.CurrentSession;
@using LiftLog.Ui.Store.Program;

@page "/"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<ProgramState> ProgramState
@inject IState<AppState> AppState
@inject IState<CurrentSessionState> CurrentSessionState
@inject IDispatcher Dispatcher
@inject NavigationManager NavigationManager

@if (ProgramState.Value.IsLoadingUpcomingSessions)
{
    <div class="flex flex-col justify-center h-full gap-4 text-on-surface">
        <div>
            <md-circular-progress aria-label="Session loading" indeterminate four-color></md-circular-progress>
        </div>
        <span>
            <p>Loading Sessions...</p>
        </span>
    </div>
}
else if (ProgramState.Value.UpcomingSessions.Count == 0)
{
    <div class="flex flex-col gap-2 px-2">
        <Card class="flex flex-col gap-4">
            <div class="flex justify-between">
                <span class="text-lg">No plan created yet!</span>
                <md-icon>info</md-icon>
            </div>
            <div class="grid grid-cols-2 gap-2">
                <AppButton Type="AppButtonType.Secondary" OnClick=@(() => Dispatcher.Dispatch(new NavigateAction("/settings/manage-workouts?planId="+ProgramState.Value.ActivePlanId)))>
                    <md-icon
                        slot="icon">
                        add
                    </md-icon>Add Workouts
                </AppButton>
                <AppButton OnClick=@(() => NavigationManager.NavigateTo("/settings/program-list"))>
                    <md-icon
                        slot="icon">
                        assignment
                    </md-icon>Select a plan
                </AppButton>
            </div>
        </Card>
        <ProFeatureCard/>
    </div>
}
else
{
    <div class="m-2">
        <Tips/>
    </div>
    <CardList Items="ProgramState.Value.UpcomingSessions.IndexedTuples()" OnClick="x => SelectSession(x.Item)">
        <SplitCardControl>
            <TitleContent>
                <SessionSummaryTitle IsFilled="context.Item.IsStarted" Session="context.Item" />
            </TitleContent>
            <MainContent>
                <SessionSummary ShowSets=true Session="context.Item"></SessionSummary>
            </MainContent>
        </SplitCardControl>
    </CardList>
}


<FloatingBottomContainer>
    <Fab>
        <div class="flex flex-col gap-2 items-end">
            @if(AppState.Value.ProState.IsPro)
            {
                <FloatingButton variant="secondary" size=medium has-icon OnClick=AiSessionCreator >
                    <md-icon slot="icon">auto_awesome</md-icon>
                </FloatingButton>
            }
            <FloatingButton variant="primary" has-icon OnClick="StartFreeformSession" Label="Freeform Session">
                <md-icon slot="icon">fitness_center</md-icon>
            </FloatingButton>
        </div>
    </Fab>
</FloatingBottomContainer>

<Dialog @ref="replaceCurrentSesisonDialog">
    <span slot="headline">Replace current session</span>
    <span slot="content" class="block text-left">
        There is already a current session in progress, start a new one without
        saving?
    </span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" OnClick="@(() => replaceCurrentSesisonDialog?.Close())">Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="ReplaceSession">Replace</AppButton>
    </div>
</Dialog>

@code {

    private Dialog? replaceCurrentSesisonDialog;
    private Session? selectedSession;

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Upcoming Workouts"));
        Dispatcher.Dispatch(new FetchUpcomingSessionsAction());
        Dispatcher.Dispatch(new SetReopenCurrentSessionAction(false));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(null));
        Dispatcher.Dispatch(new PublishUnpublishedSessionsAction());
        Dispatcher.Dispatch(new PublishRsaPublicKeyIfNeededAction());
        Dispatcher.Dispatch(new GetLookupIfNeededAction());
        Console.WriteLine("dsdffsd {0}", ProgramState.Value.ActivePlanId);
        await base.OnInitializedAsync();
    }

    private void SelectSession(Session session)
    {
        selectedSession = session;
        if (CurrentSessionState.Value.WorkoutSession is { IsStarted: true } && CurrentSessionState.Value.WorkoutSession !=
            session)
        {
            replaceCurrentSesisonDialog?.Open();
        }
        else
        {
            ReplaceSession();
        }
    }

    private async void ReplaceSession()
    {
        if (selectedSession is null)
        {
            return;
        }

        await (replaceCurrentSesisonDialog?.CloseWait() ?? Task.CompletedTask);
        Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget.WorkoutSession, selectedSession));
        Dispatcher.Dispatch(new NavigateAction("/session"));
    }

    private void StartFreeformSession()
    {
        var latestBodyweight = ProgramState.Value.UpcomingSessions.FirstOrDefault()?.Bodyweight;
        selectedSession = new Session(Guid.NewGuid(), new SessionBlueprint("Freeform Session", []), [], DateOnly.FromDateTime(DateTime.Now), latestBodyweight);
        if (CurrentSessionState.Value.WorkoutSession is { IsStarted: true })
        {
            replaceCurrentSesisonDialog?.Open();
        }
        else
        {
            Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget.WorkoutSession, selectedSession));
            NavigationManager.NavigateTo("/session");
        }
    }

    private void AiSessionCreator()
    {
        Dispatcher.Dispatch(new NavigateAction("/settings/ai-session-creator"));
    }
}
