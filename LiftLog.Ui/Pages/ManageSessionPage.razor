@using Fluxor
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using LiftLog.Ui.Store.SessionEditor

@page "/settings/manage-workouts/manage-session/{sessionIndex:int}"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject NavigationManager NavigationManager
@inject IState<SessionEditorState> SessionEditorState
@inject IState<ProgramState> ProgramState
@inject IDispatcher Dispatcher

@if (SessionEditorState.Value.SessionBlueprint is null)
{
    SubscribeToAction<RehydrateProgramAction>(_ =>
    {
        if (ProgramState.Value.SessionBlueprints.Count - 1 < SessionIndex)
        {
            BackToManageWorkouts();
        }
        Dispatcher.Dispatch(new SetEditingSessionAction(ProgramState.Value.SessionBlueprints[SessionIndex]));
    });
}
else
{
    <div class="mb-2 overflow-auto bg-surface">
        <input type="text" class="w-full mb-4 text-3xl" value="@SessionEditorState.Value.SessionBlueprint.Name" @onchange="@((e) => SetName(e.Value))"/>
        <CardList Items="SessionEditorState.Value.SessionBlueprint.Exercises.IndexedTuples()">
            @{
                var exercise = context.Item;
                var index = context.Index;
            }
            <div class="flex justify-between pb-2 mb-4">
                <input type="text" class="w-6/12 text-xl" value="@exercise.Name" @onchange="@((e) => SetExerciseName(index, e.Value))"/>
                <div >
                    <AppButton Type="AppButtonType.OutlineSecondary" OnClick=@(() => MoveExerciseUp(exercise))>‚¨ÜÔ∏è</AppButton>
                    <AppButton Type="AppButtonType.OutlineSecondary"  OnClick=@(() => MoveExerciseDown(exercise))>‚¨áÔ∏è</AppButton>
                    <AppButton Type="AppButtonType.OutlineSecondary" OnClick=@(() => RemoveExercise(exercise))>üóëÔ∏è</AppButton>
                </div>
            </div>
            <div class="flex flex-wrap justify-around w-full gap-1">
                <div class="flex flex-col gap-1">
                    <div>
                        <AppButton Type="AppButtonType.Secondary" OnClick=@(() => DecrementExerciseSets(index))>‚ûñ</AppButton><span class="inline-block w-20 mx-2 text-center">@exercise.Sets Sets</span><AppButton Type="AppButtonType.Secondary" OnClick=@(() => IncrementExerciseSets(index))>‚ûï</AppButton>
                    </div>
                    <div>
                        <AppButton Type="AppButtonType.Secondary" OnClick=@(() => DecrementExerciseRepsPerSet(index))>‚ûñ</AppButton><span class="inline-block w-20 mx-2 text-center">@exercise.RepsPerSet Reps</span><AppButton Type="AppButtonType.Secondary" OnClick=@(() => IncrementExerciseRepsPerSet(index))>‚ûï</AppButton>
                    </div>
                </div>
                <div class="flex flex-col justify-between gap-2">
                    <label class="text-lg text-center">Initial Weight</label>
                    <div class="flex justify-center gap-1">
                        <AppButton Type=AppButtonType.Secondary OnClick=@(() => OnInitialWeightDecrementClick(exercise, index))><WeightFormat Kilograms="-exercise.KilogramsIncreaseOnSuccess"/></AppButton>
                        <input class="w-20 text-lg text-center" type="text" inputmode="numeric" value=@exercise.InitialKilograms @onchange=@((e) => SetExerciseInitialWeight(index, e.Value))/>
                        <AppButton Type=AppButtonType.Secondary OnClick=@(() => OnInitialWeightIncrementClick(exercise, index))>+<WeightFormat Kilograms="exercise.KilogramsIncreaseOnSuccess"/></AppButton>
                    </div>
                </div>
                <div class="flex flex-col justify-between gap-2">
                    <label class="text-lg text-center">Success Weight Increase</label>
                    <div class="flex justify-center gap-1">
                        <AppButton Type=AppButtonType.Secondary OnClick=@(() => OnSuccessWeightDecrementClick(exercise, index))><WeightFormat Kilograms="-0.1m"/></AppButton>
                        <input class="w-20 text-lg text-center" type="text" inputmode="numeric" value=@exercise.KilogramsIncreaseOnSuccess @onchange=@((e) => SetExerciseSuccessWeight(index, e.Value))/>
                        <AppButton Type=AppButtonType.Secondary OnClick=@(() => OnSuccessWeightIncrementClick(exercise, index))>+<WeightFormat Kilograms="0.1m"/></AppButton>
                    </div>
                </div>
                <div class="flex flex-col justify-between gap-2">
                    <label class="text-lg text-center">Min Rest</label>
                    <div class="flex justify-center gap-2">
                        <RestEditor Rest="exercise.RestBetweenSets.MinRest" OnRestUpdated="rest => OnMinRestUpdated(index, rest)"></RestEditor>
                    </div>
                    <label class="text-lg text-center">Max Rest</label>
                    <div class="flex justify-center gap-2">
                        <RestEditor Rest="exercise.RestBetweenSets.SecondaryRest" OnRestUpdated="rest => OnMaxRestUpdated(index, rest)"></RestEditor>
                    </div>
                    <label class="text-lg text-center">Failure Rest</label>
                    <div class="flex justify-center gap-2">
                        <RestEditor Rest="exercise.RestBetweenSets.FailureRest" OnRestUpdated="rest => OnFailureRestUpdated(index, rest)"></RestEditor>
                    </div>
                </div>
            </div>
        </CardList>
    </div>
    <div class="flex justify-center w-full">
        <AppButton Type="AppButtonType.Secondary" OnClick=AddExercise>Add Exercise</AppButton>
    </div>
    <div class="sticky bottom-0 flex justify-end w-full pr-4">
        <AppButton Type="AppButtonType.FloatingPrimary" OnClick=SaveSession><span class="my-2 material-symbols-outlined">save</span></AppButton>
    </div>
}
@code {

    [Parameter]
    public int SessionIndex { get; set; }

    void BackToManageWorkouts() => NavigationManager.NavigateTo("/settings/manage-workouts");

    void MoveExerciseUp(ExerciseBlueprint exerciseBlueprint) => Dispatcher.Dispatch(new MoveExerciseUpAction(exerciseBlueprint));

    void MoveExerciseDown(ExerciseBlueprint exerciseBlueprint) => Dispatcher.Dispatch(new MoveExerciseDownAction(exerciseBlueprint));

    void RemoveExercise(ExerciseBlueprint exerciseBlueprint) => Dispatcher.Dispatch(new RemoveExerciseAction(exerciseBlueprint));

    void SaveSession()
    {
        if (SessionEditorState.Value.SessionBlueprint is not null)
        {
            Dispatcher.Dispatch(new SetProgramSessionAction(SessionIndex, SessionEditorState.Value.SessionBlueprint));
        }
        BackToManageWorkouts();
    }

    void AddExercise()
    {
        Dispatcher.Dispatch(new AddExerciseAction(new ExerciseBlueprint($"Exercise {SessionEditorState.Value.SessionBlueprint?.Exercises.Count + 1}", 3, 10, 20, 2.5m, new Rest(TimeSpan.FromSeconds(90), TimeSpan.FromMinutes(3), TimeSpan.FromMinutes(5)))));
    }

    void DecrementExerciseSets(int exerciseIndex) => Dispatcher.Dispatch(new DecrementExerciseSetsAction(exerciseIndex));

    void IncrementExerciseSets(int exerciseIndex) => Dispatcher.Dispatch(new IncrementExerciseSetsAction(exerciseIndex));

    void DecrementExerciseRepsPerSet(int exerciseIndex) => Dispatcher.Dispatch(new DecrementExerciseRepsPerSetAction(exerciseIndex));

    void IncrementExerciseRepsPerSet(int exerciseIndex) => Dispatcher.Dispatch(new IncrementExerciseRepsPerSetAction(exerciseIndex));

    void SetExerciseName(int exerciseIndex, object? nameObj)
    {
        if (nameObj is string name)
            Dispatcher.Dispatch(new SetExerciseNameAction(exerciseIndex, name));
    }

    void SetName(object? nameObj)
    {
        if (nameObj is string name)
            Dispatcher.Dispatch(new SetEditingSessionNameAction(name));
    }

    void SetExerciseInitialWeight(int exerciseIndex, object? initialKilogramsObj)
    {
        if (initialKilogramsObj is string initialKilogramsStr && decimal.TryParse(initialKilogramsStr, out var initialKilograms))
        {
            Dispatcher.Dispatch(new SetExerciseInitialWeightAction(exerciseIndex, initialKilograms));
        }
    }


    void OnInitialWeightIncrementClick(ExerciseBlueprint exerciseBlueprint, int index)
        => Dispatcher.Dispatch(new SetExerciseInitialWeightAction(index, exerciseBlueprint.InitialKilograms + exerciseBlueprint.KilogramsIncreaseOnSuccess));

    void OnInitialWeightDecrementClick(ExerciseBlueprint exerciseBlueprint, int index)
        => Dispatcher.Dispatch(new SetExerciseInitialWeightAction(index, exerciseBlueprint.InitialKilograms - exerciseBlueprint.KilogramsIncreaseOnSuccess));

    void SetExerciseSuccessWeight(int exerciseIndex, object? kilogramsObj)
    {
        if (kilogramsObj is string successKilogramsStr && decimal.TryParse(successKilogramsStr, out var successKilograms))
        {
            Dispatcher.Dispatch(new SetExerciseKilogramsIncreaseOnSuccessAction(exerciseIndex, successKilograms));
        }
    }

    void OnSuccessWeightIncrementClick(ExerciseBlueprint exerciseBlueprint, int index)
        => Dispatcher.Dispatch(new SetExerciseKilogramsIncreaseOnSuccessAction(index, exerciseBlueprint.KilogramsIncreaseOnSuccess + 0.1m));

    void OnSuccessWeightDecrementClick(ExerciseBlueprint exerciseBlueprint, int index)
        => Dispatcher.Dispatch(new SetExerciseKilogramsIncreaseOnSuccessAction(index, exerciseBlueprint.KilogramsIncreaseOnSuccess - 0.1m));

    void OnMinRestUpdated(int exerciseIndex, TimeSpan rest) => Dispatcher.Dispatch(new SetMinRestAction(exerciseIndex, rest));
    void OnMaxRestUpdated(int exerciseIndex, TimeSpan rest) => Dispatcher.Dispatch(new SetMaxRestAction(exerciseIndex, rest));
    void OnFailureRestUpdated(int exerciseIndex, TimeSpan rest) => Dispatcher.Dispatch(new SetFailureRestAction(exerciseIndex, rest));

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Manage Session"));
        base.OnInitialized();
    }
}
