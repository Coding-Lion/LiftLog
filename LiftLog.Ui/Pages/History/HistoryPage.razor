@page "/history"
@using Fluxor
@using LiftLog.Ui.Services
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.CurrentSession
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject SessionService SessionService
@inject NavigationManager NavigationManager
@inject IState<CurrentSessionState> CurrentSessionState
@inject IState<ProgramState> ProgramState
@inject IDispatcher Dispatcher
@inject ILogger<HistoryPage> Logger

@if (!_latestSessions.Any())
{
    <div class="flex flex-col justify-center items-center h-full gap-4 text-on-surface">
        <md-icon>info</md-icon>
        <span>
            <p>Nothing recorded yet!<br> Complete a session and check again.</p>
        </span>
    </div>
}
else
{
    <Card class="mx-2" Type=Card.CardType.Filled>
        <HistoryCalendar
            Sessions="_latestSessions"
            OnSessionClick="HandleSessionClick"
            OnMonthChange="HandleMonthChange"
            OnDateSelect=CreateSessionAtDate
            OnSessionLongPress=@((session)=>{_selectedSession = session; _deleteDialog?.Open();}) />
    </Card>
    <ItemList CardType=Card.CardType.Filled Items="filteredToMonthSessions" TItem="Session" Dividers=false >
        <button class="p-6 relative w-full"  @onclick=@(()=>HandleSessionClick(context)) @oncontextmenu=@(()=>{_selectedSession = context; _deleteDialog?.Open();}) @oncontextmenu:preventDefault=true >
            <md-ripple></md-ripple>
            <SplitCardControl>
                <TitleContent>
                    <SessionSummaryTitle IsFilled="true" Session="context" ></SessionSummaryTitle>
                </TitleContent>
                <MainContent>
                    <SessionSummary Session="context" ShowSets="true"></SessionSummary>
                </MainContent>

            </SplitCardControl>
        </button>
    </ItemList>
}

<ConfirmationDialog @ref="_deleteDialog" OkText="Delete" OnOk=DeleteSession>
    <Headline>Delete Session?</Headline>
    <TextContent>
        The session named <span class="font-bold text-primary">@_selectedSession.Blueprint.Name</span>,
        on @(_selectedSession.Date) will be deleted from history. This cannot be undone.
    </TextContent>
</ConfirmationDialog>

@code
{

    private List<Session> _latestSessions = new List<Session>();
    private List<Session> filteredToMonthSessions = new List<Session>();
    private DateOnly currentMonth = DateOnly.FromDateTime(DateTime.Now);
    private Session _selectedSession = Session.Empty;
    private ConfirmationDialog? _deleteDialog;

    private async void DeleteSession()
    {
        Dispatcher.Dispatch(new DeleteSessionAction(_selectedSession));
        Dispatcher.Dispatch(new AddUnpublishedSessionIdAction(_selectedSession.Id));
        Dispatcher.Dispatch(new SetStatsIsDirtyAction(true));
        Dispatcher.Dispatch(new PublishUnpublishedSessionsAction());
        _selectedSession = Session.Empty;
        this._latestSessions = await SessionService
            .GetLatestSessionsAsync()
            .ToListAsync();
        HandleMonthChange(currentMonth);
    }

    private void HandleSessionClick(Session session)
    {
        Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget.HistorySession, session));
        NavigationManager.NavigateTo("/history/edit");
    }

    private void HandleMonthChange(DateOnly date)
    {
        currentMonth = date;
        filteredToMonthSessions = _latestSessions.Where(s => s.Date.Month == date.Month && s.Date.Year == date.Year).ToList();
    }

    private void CreateSessionAtDate(DateOnly date)
    {
        var latestBodyweight = ProgramState.Value.UpcomingSessions.Map(x=>x.FirstOrDefault()?.Bodyweight).UnwrapOr(null);
        var session = Session.FreeformSession(date, latestBodyweight);
        Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget.HistorySession, session));
        Dispatcher.Dispatch(new NavigateAction("/history/edit"));
    }

    protected override async Task OnInitializedAsync()
    {
        var sw = System.Diagnostics.Stopwatch.StartNew();
        Dispatcher.Dispatch(new SetPageTitleAction("History"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(null));
        this._latestSessions = await SessionService
            .GetLatestSessionsAsync()
            .ToListAsync();
        HandleMonthChange(DateOnly.FromDateTime(DateTime.Now));
        await base.OnInitializedAsync();
        sw.Stop();
        Logger.LogInformation($"History page initialized in {sw.ElapsedMilliseconds} ms");
    }
}
