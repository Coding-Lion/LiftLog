@page "/history"
@using Fluxor
@using LiftLog.Ui.Services
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.CurrentSession
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject SessionService SessionService
@inject NavigationManager NavigationManager
@inject IState<CurrentSessionState> CurrentSessionState
@inject IDispatcher Dispatcher

<CardList Items="_latestSessions" OnClick="HandleSessionClick">
    <div class="grid grid-cols-[1fr,_min-content] grid-rows-1">
        <div class="pr-4 mr-4 border-r border-outline-variant ">
            <SessionSummary IsFilled="true" Session="context"></SessionSummary>
        </div>

        <div class="flex flex-col justify-around gap-2 h-min">
            <IconButton Type="IconButtonType.FilledTonal" OnClick=@(() => DeleteSession(context))><md-icon>delete</md-icon></IconButton>
        </div>
    </div>
</CardList>

@code
{

    private IReadOnlyList<Session> _latestSessions = new List<Session>();

    private async void DeleteSession(Session session)
    {
        Dispatcher.Dispatch(new DeleteSessionAction(session));
        this._latestSessions = await SessionService
            .GetLatestSessionsAsync()
            .ToListAsync();
    }

    private void HandleSessionClick(Session session)
    {
        if (CurrentSessionState.Value.HistorySession != null)
        {
            Dispatcher.Dispatch(new PersistCurrentSessionAction(SessionTarget.HistorySession));
        }
        Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget.HistorySession, session));
        NavigationManager.NavigateTo("/history/edit");
    }

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("History"));
        this._latestSessions = await SessionService
            .GetLatestSessionsAsync()
            .ToListAsync();
        await base.OnInitializedAsync();
    }
}
