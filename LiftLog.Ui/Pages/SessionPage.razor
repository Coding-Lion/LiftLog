@page "/session"
@using LiftLog.Ui.Store.CurrentSession
@using LiftLog.Ui.Store.App
@using Fluxor;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<CurrentSessionState> CurrentSessionState
@inject IDispatcher Dispatcher
@inject NavigationManager NavigationManager

@{
    this.SubscribeToAction<RehydrateSessionAction>(state =>
        {
            if (CurrentSessionState.Value.WorkoutSession is null)
            {
                NavigationManager.NavigateTo("/");
            }
        });
}
@if (CurrentSessionState.Value.WorkoutSession is not null)
{
    <SessionComponent
        CycleRepcountForExercise=CycleRepcountForExercise
        ClearRepCountForExercise="ClearRepCountForExercise"
        UpdateWeightForExercise=UpdateWeightForExercise
        Session=@(CurrentSessionState.Value.WorkoutSession)
        SaveSession=SaveSession
        CloseSession=CloseSession/>
}


@code
{
    private void ClearRepCountForExercise(int exerciseIndex, int setIndex)
    {
        Dispatcher.Dispatch(new ClearExerciseRepsAction(SessionTarget.WorkoutSession, exerciseIndex, setIndex));
        Dispatcher.Dispatch(new NotifySetTimerAction(SessionTarget.WorkoutSession));
    }

    private void CycleRepcountForExercise(int exerciseIndex, int setIndex)
    {
        Dispatcher.Dispatch(new CycleExerciseRepsAction(SessionTarget.WorkoutSession, exerciseIndex, setIndex));
        Dispatcher.Dispatch(new NotifySetTimerAction(SessionTarget.WorkoutSession));
    }

    private void UpdateWeightForExercise(int exerciseIndex, decimal kilograms)
    {
        Dispatcher.Dispatch(new UpdateExerciseWeightAction(SessionTarget.WorkoutSession, exerciseIndex, kilograms));
    }

    private void SaveSession()
    {
        Dispatcher.Dispatch(new PersistCurrentSessionAction(SessionTarget.WorkoutSession));
        Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget.WorkoutSession, null));

        NavigationManager.NavigateTo("/");
    }

    private void CloseSession()
    {
        NavigationManager.NavigateTo("/");
    }
    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Session"));
        base.OnInitialized();
    }
}
