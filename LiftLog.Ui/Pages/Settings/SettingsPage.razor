@page "/settings"
@using Fluxor
@using LiftLog.Ui.Services
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Settings

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher
@inject IAppPurchaseService AppPurchaseService
@inject IState<AppState> AppState

<div class="flex flex-col gap-2">
    <Card>
        <div class="flex flex-col gap-4">
            <div class="flex justify-between">
                <span class="self-start text-lg">Data Management</span>
                <md-icon>description</md-icon>
            </div>
            <div class="flex justify-between">
                <AppButton OnClick="OpenImportPopup" Type="AppButtonType.OutlineSecondary">
                    <md-icon slot="icon">download</md-icon>Import Data
                </AppButton>
                <AppButton OnClick="ExportData" Type="AppButtonType.OutlineSecondary">
                    <md-icon slot="icon">upload</md-icon>Export Data
                </AppButton>
            </div>
            <AppButton OnClick="NavigateToManage" >
                <md-icon slot="icon">construction</md-icon>
                Manage Workouts
            </AppButton>
        </div>
    </Card>
    <Card>
        <div class="flex flex-col gap-4">
        <div class="flex justify-between">
            <span class="mb-4 text-lg text-center">Pro Features</span>
            @RenderLockedPro()
         </div>
        <AppButton Disabled=!AppState.Value.ProState.IsPro Type="AppButtonType.Secondary" OnClick="NavigateToAiPlanner">
            <md-icon slot="icon">auto_awesome</md-icon>
            AI Planner
        </AppButton>
        </div>
    </Card>
</div>

<Dialog @ref="importPopup">
    <span slot="headline">Paste Export Below</span>
    <InputTextArea slot="content" @bind-Value="ImportJson"/>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" OnClick="CloseImportPopup">Close</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="ImportData">Import</AppButton>
    </div>
</Dialog>

<Dialog @ref="upgradeDialog">
    <span slot="headline">Upgrade to Pro</span>
    <span slot="content" class="block text-left">This will unlock the AI planner, which will generate a plan tailored specifically to you and your goals. <br/>This is a one time purchase.</span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" OnClick="()=>upgradeDialog?.Close()">Close</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="UpgradeToPro">Upgrade</AppButton>
    </div>

</Dialog>


@code {
    private string ImportJson { get; set; } = "";

    private Dialog? importPopup;

    private Dialog? upgradeDialog;

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Settings"));
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private RenderFragment RenderLockedPro(){
        if(AppState.Value.ProState.IsPro){
            return @<md-icon>verified</md-icon>;
        }
       return @<AppButton OnClick="()=>{upgradeDialog?.Open();}" ><md-icon slot="icon">lock</md-icon>Unlock</AppButton>;
    }


    private void NavigateToManage()
    {
        NavigationManager.NavigateTo("/settings/manage-workouts");
    }

    private void NavigateToAiPlanner()
    {
        NavigationManager.NavigateTo("/settings/ai-planner");
    }

    private void OpenImportPopup()
    {
        importPopup?.Open();
    }

    private void CloseImportPopup()
    {
        importPopup?.Close();
        ImportJson = "";
    }

    private void ImportData()
    {
        if (ImportJson != "")
        {
            Dispatcher.Dispatch(new ImportDataAction(ImportJson));
            CloseImportPopup();
        }

    }

    private async void UpgradeToPro()
    {
        var proKey = await AppPurchaseService.GetProKeyAsync();
        if(proKey != null){
            Dispatcher.Dispatch(new SetProTokenAction(proKey));
        }
        await InvokeAsync(()=>upgradeDialog?.Close());
    }

    private void ExportData() => Dispatcher.Dispatch(new ExportDataAction());

}
