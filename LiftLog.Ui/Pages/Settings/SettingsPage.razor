@page "/settings"
@using Fluxor
@using LiftLog.Ui.Services
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Settings
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher
<div class="flex flex-col h-full gap-4 p-2 overflow-auto bg-surface text-on-surface">
    <section class="flex flex-col px-5">
        <span class="mb-4 text-lg text-center">Data Management</span>
        <div class="flex justify-around">
            <AppButton OnClick="OpenImportPopup" Type="AppButtonType.OutlineSecondary">
                Import Data
            </AppButton>
            <AppButton OnClick="ExportData" Type="AppButtonType.OutlineSecondary">
                Export Data
            </AppButton>
        </div>
    </section>
    <section class="flex flex-col px-5">
        <AppButton  OnClick="NavigateToManage" >
            <span class="align-middle material-symbols-outlined">construction</span>
            Manage Workouts
        </AppButton>
    </section>
    <section class="flex flex-col px-5">
        <AppButton Type="AppButtonType.Secondary" OnClick="NavigateToAiPlanner">
            <span class="align-middle material-symbols-outlined">auto_awesome</span>
            AI Planner
        </AppButton>
    </section>
</div>
<div class="import-popup @(ImportPopupActive ? "active" :"")" >
    <div class="import-popup-content">
        <div class="flex flex-col">
            <span>Paste Export Below</span>
            <InputTextArea @bind-Value="ImportJson"  />
            <div class="flex justify-between my-2">
                <AppButton Type="AppButtonType.Secondary" OnClick="CloseImportPopup">Close</AppButton>
                <AppButton Type="AppButtonType.Primary" OnClick="ImportData">Import</AppButton>
            </div>
        </div>
    </div>
</div>

@code {


    private bool ImportPopupActive { get; set; }

    private string ImportJson { get; set; } = "";


    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Settings"));
        base.OnInitialized();
    }

    private void NavigateToManage()
    {
        NavigationManager.NavigateTo("/settings/manage-workouts");
    }

    private void NavigateToAiPlanner()
    {
        NavigationManager.NavigateTo("/settings/ai-planner");
    }

    private void OpenImportPopup()
    {
        ImportPopupActive = true;
    }

    private void CloseImportPopup()
    {
        ImportPopupActive = false;
        ImportJson = "";
    }

    private void ImportData()
    {
        if (ImportJson != "")
        {
            Dispatcher.Dispatch(new ImportDataAction(ImportJson));
            CloseImportPopup();
        }

    }

    private void ExportData() => Dispatcher.Dispatch(new ExportDataAction());

}
