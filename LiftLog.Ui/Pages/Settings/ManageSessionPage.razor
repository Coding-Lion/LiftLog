@using Fluxor
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using LiftLog.Ui.Store.SessionEditor

@page "/settings/manage-workouts/manage-session/{sessionIndex:int}"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject NavigationManager NavigationManager
@inject IState<SessionEditorState> SessionEditorState
@inject IState<ProgramState> ProgramState
@inject IDispatcher Dispatcher

@if (SessionEditorState.Value.SessionBlueprint is null)
{
    SubscribeToAction<RehydrateProgramAction>(_ =>
    {
        if (ProgramState.Value.SessionBlueprints.Count - 1 < SessionIndex)
        {
            BackToManageWorkouts();
        }
        Dispatcher.Dispatch(new SetEditingSessionAction(ProgramState.Value.SessionBlueprints[SessionIndex]));
    });
}
else
{
    <div class="bg-surface">
        <TextField
            TextFieldType="TextFieldType.Filled"
            class="w-full mb-4"
            Label="Session Name"
            Value="@SessionEditorState.Value.SessionBlueprint.Name"
            OnChange="@((val) => SetName(val))"></TextField>
        <CardList Items="SessionEditorState.Value.SessionBlueprint.Exercises.IndexedTuples()">
            @{
                var exercise = context.Item;
                var index = context.Index;
            }
            <SplitCardControl>
                <MainContent>
                    <ExerciseEditor Exercise="@exercise" UpdateExercise=@(ex => UpdateExercise(index, ex)) />
                </MainContent>
                <SideContent>
                    <IconButton Type="IconButtonType.FilledTonal" OnClick=@(() => RemoveExercise(exercise)) Icon="delete" />
                    <IconButton Type="IconButtonType.Outlined" OnClick=@(() => MoveExerciseUp(exercise)) Icon="arrow_upward" />
                    <IconButton Type="IconButtonType.Outlined" OnClick=@(() => MoveExerciseDown(exercise)) Icon="arrow_downward" />
                </SideContent>
            </SplitCardControl>
        </CardList>
    </div>
    <div class="flex justify-center pointer-events-none w-full mt-2">
        <AppButton Type="AppButtonType.Primary" OnClick=AddExercise>Add Exercise</AppButton>
    </div>
    <div class="sticky bottom-0 flex flex-col pointer-events-none mt-auto pt-2">
        <div class="flex justify-end w-full">
            <FloatingButton has-icon variant="secondary" OnClick=SaveSession Label="Save"><md-icon slot="icon">save</md-icon></FloatingButton>
        </div>
    </div>
}
@code {

    [Parameter]
    public int SessionIndex { get; set; }

    void BackToManageWorkouts() => NavigationManager.NavigateTo("/settings/manage-workouts");

    void MoveExerciseUp(ExerciseBlueprint exerciseBlueprint) => Dispatcher.Dispatch(new MoveExerciseUpAction(exerciseBlueprint));

    void MoveExerciseDown(ExerciseBlueprint exerciseBlueprint) => Dispatcher.Dispatch(new MoveExerciseDownAction(exerciseBlueprint));

    void RemoveExercise(ExerciseBlueprint exerciseBlueprint) => Dispatcher.Dispatch(new RemoveExerciseAction(exerciseBlueprint));

    void SaveSession()
    {
        if (SessionEditorState.Value.SessionBlueprint is not null)
        {
            Dispatcher.Dispatch(new SetProgramSessionAction(SessionIndex, SessionEditorState.Value.SessionBlueprint));
        }
        BackToManageWorkouts();
    }

    void AddExercise()
    => Dispatcher.Dispatch(
            new AddExerciseAction(
                new ExerciseBlueprint(
                    $"Exercise {SessionEditorState.Value.SessionBlueprint?.Exercises.Count + 1}",
                    3,
                    10,
                    20,
                    2.5m,
                    new Rest(TimeSpan.FromSeconds(90), TimeSpan.FromMinutes(3), TimeSpan.FromMinutes(5)),
                    false)));

    void UpdateExercise(int index, ExerciseBlueprint exercise)
        => Dispatcher.Dispatch(new UpdateSessionExerciseAction(index, exercise));

    void SetName(string name)
    {
        Dispatcher.Dispatch(new SetEditingSessionNameAction(name));
    }

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Manage Session"));
        Dispatcher.Dispatch(new FetchExerciseNamesAction());
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/settings/manage-workouts"));
        base.OnInitialized();
    }
}
