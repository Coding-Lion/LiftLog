@using Fluxor
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using LiftLog.Ui.Store.SessionEditor

@page "/settings/manage-workouts/manage-session/{sessionIndex:int}"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject NavigationManager NavigationManager
@inject IState<SessionEditorState> SessionEditorState
@inject IState<ProgramState> ProgramState
@inject IDispatcher Dispatcher

@if (SessionEditorState.Value.SessionBlueprint is null)
{
    SubscribeToAction<RehydrateProgramAction>(_ =>
    {
        if (ProgramState.Value.SessionBlueprints.Count - 1 < SessionIndex)
        {
            BackToManageWorkouts();
        }
        Dispatcher.Dispatch(new SetEditingSessionAction(ProgramState.Value.SessionBlueprints[SessionIndex]));
    });
}
else
{
    <div class="mb-2 overflow-auto bg-surface">
        <md-filled-text-field type="text" class="w-full mb-4" value="@SessionEditorState.Value.SessionBlueprint.Name" @onchange="@((e) => SetName(e.Value))"></md-filled-text-field>
        <CardList Items="SessionEditorState.Value.SessionBlueprint.Exercises.IndexedTuples()">
            @{
                var exercise = context.Item;
                var index = context.Index;
            }
            <SplitCardControl>
                <MainContent>
                    <md-filled-text-field type="text" class="w-full mb-2 text-xl" value="@exercise.Name" @onchange="e => SetExerciseName(index, e.Value)"></md-filled-text-field>
                    <div class="flex flex-wrap justify-around w-full gap-1">
                        <div class="flex flex-col items-center gap-1">
                            <FixedIncrementer
                                Value="exercise.Sets"
                                Increment="() => IncrementExerciseSets(index)"
                                Decrement="() => DecrementExerciseSets(index)"
                                Label="Sets"
                            />
                            <FixedIncrementer
                                Value="exercise.RepsPerSet"
                                Increment="() => IncrementExerciseRepsPerSet(index)"
                                Decrement="() => DecrementExerciseRepsPerSet(index)"
                                Label="Reps"
                            />
                        </div>
                        <EditableIncrementer
                            Increment="() => OnInitialWeightIncrementClick(exercise, index)"
                            Decrement="() => OnInitialWeightDecrementClick(exercise, index)"
                            Label="Initial Weight"
                            Value="exercise.InitialKilograms"
                            OnChange="e => SetExerciseInitialWeight(index, e)"
                        />
                        <EditableIncrementer
                            Increment="() => OnSuccessWeightIncrementClick(exercise, index)"
                            Decrement="() => OnSuccessWeightDecrementClick(exercise, index)"
                            Label="Success Weight Increase"
                            Value="exercise.KilogramsIncreaseOnSuccess"
                            OnChange="e => SetExerciseSuccessWeight(index, e)"/>
                        <div class="flex flex-col justify-between gap-2">
                            <RestEditor Label="Min Rest" Rest="exercise.RestBetweenSets.MinRest" OnRestUpdated="rest => OnMinUpdated(index, rest)"></RestEditor>
                            <RestEditor Label="Max Rest" Rest="exercise.RestBetweenSets.MaxRest" OnRestUpdated="rest => OnMaxUpdated(index, rest)"></RestEditor>
                            <RestEditor Label="Failure Rest" Rest="exercise.RestBetweenSets.FailureRest" OnRestUpdated="rest => OnFailureUpdated(index, rest)"></RestEditor>
                        </div>
                    </div>
                </MainContent>
                <SideContent>
                    <IconButton Type="IconButtonType.FilledTonal" OnClick=@(() => RemoveExercise(exercise))><md-icon>delete</md-icon></IconButton>
                    <IconButton Type="IconButtonType.Outlined" OnClick=@(() => MoveExerciseUp(exercise))><md-icon>arrow_upward</md-icon>Ô∏è</IconButton>
                    <IconButton Type="IconButtonType.Outlined" OnClick=@(() => MoveExerciseDown(exercise))><md-icon>arrow_downward</md-icon></IconButton>
                </SideContent>
            </SplitCardControl>
        </CardList>
    </div>
    <div class="flex justify-center w-full">
        <AppButton Type="AppButtonType.Primary" OnClick=AddExercise>Add Exercise</AppButton>
    </div>
    <div class="sticky bottom-0 flex justify-end w-full">
        <AppButton Type="AppButtonType.FloatingPrimary" OnClick=SaveSession>Save<md-icon slot="icon">save</md-icon></AppButton>
    </div>
}
@code {

    [Parameter]
    public int SessionIndex { get; set; }

    void BackToManageWorkouts() => NavigationManager.NavigateTo("/settings/manage-workouts");

    void MoveExerciseUp(ExerciseBlueprint exerciseBlueprint) => Dispatcher.Dispatch(new MoveExerciseUpAction(exerciseBlueprint));

    void MoveExerciseDown(ExerciseBlueprint exerciseBlueprint) => Dispatcher.Dispatch(new MoveExerciseDownAction(exerciseBlueprint));

    void RemoveExercise(ExerciseBlueprint exerciseBlueprint) => Dispatcher.Dispatch(new RemoveExerciseAction(exerciseBlueprint));

    void SaveSession()
    {
        if (SessionEditorState.Value.SessionBlueprint is not null)
        {
            Dispatcher.Dispatch(new SetProgramSessionAction(SessionIndex, SessionEditorState.Value.SessionBlueprint));
        }
        BackToManageWorkouts();
    }

    void AddExercise()
    {
        Dispatcher.Dispatch(new AddExerciseAction(new ExerciseBlueprint($"Exercise {SessionEditorState.Value.SessionBlueprint?.Exercises.Count + 1}", 3, 10, 20, 2.5m, new Rest(TimeSpan.FromSeconds(90), TimeSpan.FromMinutes(3), TimeSpan.FromMinutes(5)))));
    }

    void DecrementExerciseSets(int exerciseIndex) => Dispatcher.Dispatch(new DecrementExerciseSetsAction(exerciseIndex));

    void IncrementExerciseSets(int exerciseIndex) => Dispatcher.Dispatch(new IncrementExerciseSetsAction(exerciseIndex));

    void DecrementExerciseRepsPerSet(int exerciseIndex) => Dispatcher.Dispatch(new DecrementExerciseRepsPerSetAction(exerciseIndex));

    void IncrementExerciseRepsPerSet(int exerciseIndex) => Dispatcher.Dispatch(new IncrementExerciseRepsPerSetAction(exerciseIndex));

    void SetExerciseName(int exerciseIndex, object? nameObj)
    {
        if (nameObj is string name)
            Dispatcher.Dispatch(new SetExerciseNameAction(exerciseIndex, name));
    }

    void SetName(object? nameObj)
    {
        if (nameObj is string name)
            Dispatcher.Dispatch(new SetEditingSessionNameAction(name));
    }

    void SetExerciseInitialWeight(int exerciseIndex, decimal initialKilograms)
        => Dispatcher.Dispatch(new SetExerciseInitialWeightAction(exerciseIndex, initialKilograms));

    void OnInitialWeightIncrementClick(ExerciseBlueprint exerciseBlueprint, int index)
        => Dispatcher.Dispatch(new SetExerciseInitialWeightAction(index, exerciseBlueprint.InitialKilograms + exerciseBlueprint.KilogramsIncreaseOnSuccess));

    void OnInitialWeightDecrementClick(ExerciseBlueprint exerciseBlueprint, int index)
        => Dispatcher.Dispatch(new SetExerciseInitialWeightAction(index, exerciseBlueprint.InitialKilograms - exerciseBlueprint.KilogramsIncreaseOnSuccess));

    void SetExerciseSuccessWeight(int exerciseIndex, decimal kilograms)
        => Dispatcher.Dispatch(new SetExerciseKilogramsIncreaseOnSuccessAction(exerciseIndex, kilograms));

    void OnSuccessWeightIncrementClick(ExerciseBlueprint exerciseBlueprint, int index)
        => Dispatcher.Dispatch(new SetExerciseKilogramsIncreaseOnSuccessAction(index, exerciseBlueprint.KilogramsIncreaseOnSuccess + 0.1m));

    void OnSuccessWeightDecrementClick(ExerciseBlueprint exerciseBlueprint, int index)
        => Dispatcher.Dispatch(new SetExerciseKilogramsIncreaseOnSuccessAction(index, exerciseBlueprint.KilogramsIncreaseOnSuccess - 0.1m));

    void OnMinUpdated(int exerciseIndex, TimeSpan rest) => Dispatcher.Dispatch(new SetMinAction(exerciseIndex, rest));
    void OnMaxUpdated(int exerciseIndex, TimeSpan rest) => Dispatcher.Dispatch(new SetMaxAction(exerciseIndex, rest));
    void OnFailureUpdated(int exerciseIndex, TimeSpan rest) => Dispatcher.Dispatch(new SetFailureAction(exerciseIndex, rest));

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Manage Session"));
        base.OnInitialized();
    }
}
