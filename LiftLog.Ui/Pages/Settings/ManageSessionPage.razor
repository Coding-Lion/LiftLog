@using Fluxor
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using LiftLog.Ui.Store.SessionEditor

@page "/settings/manage-workouts/manage-session/{sessionIndex:int}"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@implements IDisposable

@inject NavigationManager NavigationManager
@inject IState<SessionEditorState> SessionEditorState
@inject IState<ProgramState> ProgramState
@inject IDispatcher Dispatcher

@if (SessionEditorState.Value.SessionBlueprint is not null)
{
    <div class="bg-surface">
        <TextField
            TextFieldType="TextFieldType.Filled"
            class="w-full mb-4"
            Label="Session Name"
            Value="@SessionEditorState.Value.SessionBlueprint.Name"
            OnChange="@((val) => SetName(val!))">
        </TextField>
        <ItemList Items="SessionEditorState.Value.SessionBlueprint.Exercises.IndexedTuples()">
            @{
                var exercise = context.Item;
                var index = context.Index;
            }
            <div class="py-4 pl-5 pr-0">
                <SplitCardControl>
                    <MainContent>
                        <ExerciseEditor Exercise="@exercise" UpdateExercise=@(ex => UpdateExercise(index, ex))/>
                    </MainContent>
                    <SideContent>
                        <IconButton Type="IconButtonType.Standard" OnClick=@(() => RemoveExercise(exercise)) Icon="delete"/>
                        <IconButton Type="IconButtonType.Standard" OnClick=@(() => MoveExerciseUp(exercise)) Icon="arrow_upward"/>
                        <IconButton Type="IconButtonType.Standard" OnClick=@(() => MoveExerciseDown(exercise)) Icon="arrow_downward"/>
                    </SideContent>
                </SplitCardControl>
            </div>
        </ItemList>
    </div>
    <div class="flex justify-center pointer-events-none w-full mt-2">
        <AppButton Type="AppButtonType.Primary" OnClick=AddExercise>Add Exercise</AppButton>
    </div>
}

@code {

    [Parameter] public int SessionIndex { get; set; }

    [CascadingParameter(Name = "IsInActiveScreen")]
    public bool IsInActiveScreen { get; set; }

    void BackToManageWorkouts() => NavigationManager.NavigateTo("/settings/manage-workouts");

    void MoveExerciseUp(ExerciseBlueprint exerciseBlueprint)
    {
        Dispatcher.Dispatch(new MoveExerciseUpAction(exerciseBlueprint));
        SaveSession();
    }

    void MoveExerciseDown(ExerciseBlueprint exerciseBlueprint)
    {
        Dispatcher.Dispatch(new MoveExerciseDownAction(exerciseBlueprint));
        SaveSession();
    }

    void RemoveExercise(ExerciseBlueprint exerciseBlueprint)
    {
        Dispatcher.Dispatch(new RemoveExerciseAction(exerciseBlueprint));
        SaveSession();
    }

    void SaveSession()
    {
        if (SessionEditorState.Value.SessionBlueprint is not null)
        {
            Dispatcher.Dispatch(new SetProgramSessionAction(SessionIndex, SessionEditorState.Value.SessionBlueprint));
        }
    }

    void AddExercise()
    {
        Dispatcher.Dispatch(
        new AddExerciseAction(
            new ExerciseBlueprint(
                $"Exercise {SessionEditorState.Value.SessionBlueprint?.Exercises.Count + 1}",
                3,
                10,
                20,
                2.5m,
                new Rest(TimeSpan.FromSeconds(90), TimeSpan.FromMinutes(3), TimeSpan.FromMinutes(5)),
                false)));
        SaveSession();
    }

    void UpdateExercise(int index, ExerciseBlueprint exercise)
    {
        Dispatcher.Dispatch(new UpdateSessionExerciseAction(index, exercise));
        SaveSession();
    }


    void SetName(string name)
    {
        Dispatcher.Dispatch(new SetEditingSessionNameAction(name));
        SaveSession();
    }

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Manage Session"));
        Dispatcher.Dispatch(new FetchExerciseNamesAction());
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/settings/manage-workouts"));
        if (ProgramState.Value.SessionBlueprints.Count - 1 < SessionIndex)
        {
            BackToManageWorkouts();
        }

        Dispatcher.Dispatch(new SetEditingSessionAction(ProgramState.Value.SessionBlueprints[SessionIndex]));
        base.OnInitialized();
    }

    protected override void Dispose(bool disposing)
    {
        Dispatcher.Dispatch(new PublishIdentityIfEnabledAction());
        base.Dispose(disposing);
    }

}
