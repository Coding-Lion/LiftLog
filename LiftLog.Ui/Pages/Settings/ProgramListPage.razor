@using Fluxor;
@using LiftLog.Ui.Store.App;
@using LiftLog.Ui.Store.Settings;
@using LiftLog.Ui.Services;

@page "/settings/program-list"

@inject IDispatcher Dispatcher;
@inject IState<ProgramState> ProgramState
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if(ProgramState.Value.SavedPrograms.Any())
{
    var orderedPrograms = ProgramState.Value.SavedPrograms.OrderBy(x=>x.Value.Name).ToList();
    <section class="text-left text-on-surface flex flex-col">
        <h2 class="pl-4 text-xl font-bold">Saved Plans</h2>
        <md-list>
            @foreach (var (id, program) in orderedPrograms)
            {
                <ProgramListItem
                    ProgramBlueprint="@program"
                    OnClick=@(() => OpenEditProgram(id))
                    OnUse="@(() => BeginSelectProgram(id, program))"
                    OnDuplicate="@(() => Dispatcher.Dispatch(new SavePlanAction(Guid.NewGuid(), program)))"
                    OnRemove="@(() => Dispatcher.Dispatch(new DeleteSavedPlanAction(id)))"
                    IsActive="ProgramState.Value.ActivePlanId == id"
                    IsFocused="FocusPlanId == id"
                    BuiltIn=false/>
                @if(id != orderedPrograms.Last().Key)
                {
                    <md-divider></md-divider>
                }
            }
        </md-list>
    </section>
}


<Dialog @ref="selectedProgramDialog">
    <span slot="headline">Select Program</span>
    @if (selectedProgram != null)
    {
        <span slot="content" class="block text-left">
            Would you like to use the program
            <span class="font-bold text-primary">@selectedProgram.Value.Blueprint.Name</span>?<br/>This will replace your existing workouts.
        </span>
        <div class="flex gap-1" slot="actions">
            <AppButton Type="AppButtonType.Text" OnClick="() => selectedProgramDialog?.Close()">Close</AppButton>
            <AppButton Type="AppButtonType.Text" OnClick="SelectProgram">Use</AppButton>
        </div>
    }
</Dialog>



<FloatingBottomContainer>
    <Fab>
        <div class="flex flex-col gap-2 items-end">
            <FloatingButton variant="primary" has-icon OnClick="AddNewPlan" Label="Add plan">
                <md-icon slot="icon">add</md-icon>
            </FloatingButton>
        </div>
    </Fab>
</FloatingBottomContainer>



@code {
    private (Guid Id, ProgramBlueprint Blueprint)? selectedProgram;
    private Dialog? selectedProgramDialog;

    [SupplyParameterFromQuery]
    public Guid FocusPlanId { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new SetPageTitleAction("Plans"));
        Dispatcher.Dispatch(new FetchSavedProgramsAction());
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/settings"));
    }

    private void BeginSelectProgram(Guid id, ProgramBlueprint program)
    {
        selectedProgram = (id, program);
        selectedProgramDialog?.Open();
    }

    private async Task SelectProgram()
    {
        await selectedProgramDialog!.CloseWait();
        if (selectedProgram != null)
        {
            Dispatcher.Dispatch(new SetActiveProgramAction(selectedProgram.Value.Id));
        }
    }

    private void AddNewPlan()
    {
        var planId = Guid.NewGuid();
        Dispatcher.Dispatch(
            new SavePlanAction(
                planId,
                new ProgramBlueprint(
                    Name: "New Plan",
                    Sessions: [],
                    LastEdited: DateOnly.FromDateTime(DateTime.Now))));
        Dispatcher.Dispatch(new NavigateAction("/settings/manage-workouts?planId=" + planId));
    }

    private void OpenEditProgram(Guid id)
    {
        Dispatcher.Dispatch(new NavigateAction("/settings/manage-workouts?planId=" + id));
    }

}
