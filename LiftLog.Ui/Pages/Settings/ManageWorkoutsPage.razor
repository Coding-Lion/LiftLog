@using Fluxor
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using LiftLog.Ui.Store.SessionEditor
@using System.Text.RegularExpressions

@page "/settings/manage-workouts"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<ProgramState> ProgramState
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher

<CardList Items="ProgramState.Value.SessionBlueprints.IndexedTuples()" OnClick="(item) => SelectSession(item.Item, item.Index)">
    @{
        var session = context.Item;
        var index = context.Index;
    }
    <div class="grid grid-cols-[1fr,_min-content] grid-rows-1">
        <div class="flex flex-col justify-between pr-4 mr-4 border-r border-outline-variant ">
            <span class="text-xl">@session.Name</span>
            @foreach (var exercise in session.Exercises)
            {
                <div class="flex justify-between w-full">
                    <span >@exercise.Name</span>
                    <span> @exercise.Sets x @exercise.RepsPerSet</span>
                </div>
            }
        </div>
        <div class="flex flex-col justify-around gap-2 h-min">
            <IconButton Type="IconButtonType.FilledTonal" OnClick=@(() => OverflowSession(index))>
                    <md-icon>more_horiz</md-icon>
            </IconButton>
            <div class="relative z-10 -my-1">
                <div class="fixed cursor-default @(index == _overFlowedSessionIndex ? "right-0 top-0 bottom-0 left-0" : "")" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="() => _overFlowedSessionIndex = null"></div>
                <ul @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="() => _overFlowedSessionIndex = null"
                    class="absolute top-0 right-0 bg-surface-container text-on-surface px-2 py-2 rounded-md shadow-md flex flex-col text-left gap-2 transition-all origin-top-right @GetOverflowStyle(index)">
                    <li @onclick="() => RemoveSession(session)" class="flex gap-2 py-2"><md-icon>delete</md-icon>Remove</li>
                    <li @onclick="() => DuplicateSession(session)" class="flex gap-2 py-2"><md-icon>content_copy</md-icon>Duplicate</li>
                </ul>
            </div>
            <IconButton Type="IconButtonType.Outlined" OnClick=@(() => MoveSessionUp(session))><md-icon>arrow_upward</md-icon>Ô∏è</IconButton>
            <IconButton Type="IconButtonType.Outlined" OnClick=@(() => MoveSessionDown(session))>
                <md-icon>arrow_downward</md-icon>
            </IconButton>
        </div>
    </div>
</CardList>

<div class="flex justify-center mt-2">
    <AppButton Type="AppButtonType.Primary" OnClick="AddSession">Add Session</AppButton>
</div>

@code {

    private int? _overFlowedSessionIndex;

    void MoveSessionUp(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(new MoveSessionBlueprintUpInProgramAction(sessionBlueprint));

    void MoveSessionDown(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(new MoveSessionBlueprintDownInProgramAction(sessionBlueprint));

    void RemoveSession(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(new RemoveSessionFromProgramAction(sessionBlueprint));

    void OverflowSession(int index)
    {
        _overFlowedSessionIndex = index;
    }

    void BackToSettings() => NavigationManager.NavigateTo("/settings");

    void SelectSession(SessionBlueprint sessionBlueprint, int index)
    {
        Dispatcher.Dispatch(new SetEditingSessionAction(sessionBlueprint));
        NavigationManager.NavigateTo($"/settings/manage-workouts/manage-session/{index}");
    }

    void AddSession() => Dispatcher.Dispatch(
        new AddProgramSessionAction(
            new SessionBlueprint($"Session {ProgramState.Value.SessionBlueprints.Count + 1}", new ImmutableListSequence<ExerciseBlueprint>())));

    void DuplicateSession(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(
        new AddProgramSessionAction(
            sessionBlueprint with {
                Name = $"Session {ProgramState.Value.SessionBlueprints.Count + 1}"}
            )
        );

    string GetOverflowStyle(int index) => _overFlowedSessionIndex == index
        ? "scale-100"
        : "scale-0";

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Manage Workouts"));
        base.OnInitialized();
    }

}
