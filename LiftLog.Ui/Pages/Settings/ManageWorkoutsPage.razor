@using Fluxor
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using LiftLog.Ui.Store.SessionEditor
@using System.Text.RegularExpressions

@page "/settings/manage-workouts"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<ProgramState> ProgramState
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher

<CardList Items="ProgramState.Value.SessionBlueprints.IndexedTuples()" OnClick="(item) => SelectSession(item.Item, item.Index)">
    @{
        var session = context.Item;
        var index = context.Index;
    }
    <SplitCardControl>
        <MainContent>
            <SessionSummary Session="context.Item.GetEmptySession()"></SessionSummary>
        </MainContent>
        <SideContent>

            <IconButton Type="IconButtonType.FilledTonal" OnClick=@(() => OverflowSession(index))>
                <md-icon>more_horiz</md-icon>
            </IconButton>
            <Menu @ref="_menus[index]">
                <MenuItem Icon="delete" Label="Remove" OnClick="()=>RemoveSession(session)" />
                <MenuItem Icon="content_copy" Label="Duplicate" OnClick="()=>DuplicateSession(session)" />
            </Menu>
            <IconButton Type="IconButtonType.Outlined" OnClick=@(() => MoveSessionUp(session))><md-icon>arrow_upward</md-icon>Ô∏è</IconButton>
            <IconButton Type="IconButtonType.Outlined" OnClick=@(() => MoveSessionDown(session))>
                <md-icon>arrow_downward</md-icon>
            </IconButton>
        </SideContent>
    </SplitCardControl>
</CardList>

<div class="flex justify-center mt-2">
    <AppButton Type="AppButtonType.Primary" OnClick="AddSession">Add Session</AppButton>
</div>

@code {

    private Dictionary<int, Menu> _menus = new();

    void MoveSessionUp(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(new MoveSessionBlueprintUpInProgramAction(sessionBlueprint));

    void MoveSessionDown(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(new MoveSessionBlueprintDownInProgramAction(sessionBlueprint));

    void RemoveSession(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(new RemoveSessionFromProgramAction(sessionBlueprint));

    void OverflowSession(int index)
    {
        _menus.GetValueOrDefault(index)?.Open();
    }

    void BackToSettings() => NavigationManager.NavigateTo("/settings");

    void SelectSession(SessionBlueprint sessionBlueprint, int index)
    {
        Dispatcher.Dispatch(new SetEditingSessionAction(sessionBlueprint));
        NavigationManager.NavigateTo($"/settings/manage-workouts/manage-session/{index}");
    }

    void AddSession() => Dispatcher.Dispatch(
        new AddProgramSessionAction(
            new SessionBlueprint($"Session {ProgramState.Value.SessionBlueprints.Count + 1}", new ImmutableListSequence<ExerciseBlueprint>())));

    void DuplicateSession(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(
        new AddProgramSessionAction(
            sessionBlueprint with {
                Name = $"Session {ProgramState.Value.SessionBlueprints.Count + 1}"}
            )
        );

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Manage Workouts"));
        base.OnInitialized();
    }

}
