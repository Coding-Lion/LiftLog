@using Fluxor
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using LiftLog.Ui.Store.SessionEditor
@using System.Text.RegularExpressions

@page "/settings/manage-workouts"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@implements IDisposable

@inject IState<ProgramState> ProgramState
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher
@inject IJSRuntime JSRuntime

@if(PlanId != Guid.Empty)
{
    <TextField
        Label="Plan Name"
        TextFieldType="TextFieldType.Filled"
        Value="@ProgramState.Value.SavedPrograms[PlanId].Name"
        class="mb-2"
        OnChange="@((val) => Dispatcher.Dispatch(new SetSavedPlanNameAction(PlanId, val??"")))" />
}

@if (!ProgramState.Value.GetSessionBlueprints(PlanId).Any())
{
    <div class="flex flex-col justify-center items-center h-full gap-4 text-on-surface">
        <md-icon>info</md-icon>
        <span>
            <p>No sessions in plan<br> Add a session to get started.</p>
        </span>
    </div>
}
<CardList Items="ProgramState.Value.GetSessionBlueprints(PlanId).IndexedTuples()" OnClick="(item) => SelectSession(item.Item, item.Index)">
    @{
        var session = context.Item;
        var index = context.Index;
    }
    <ManageWorkoutCardContent
        SessionBlueprint="session"
        OnMoveSessionUp="() => MoveSessionUp(session)"
        OnMoveSessionDown="() => MoveSessionDown(session)"
        OnRemoveSession="() => RemoveSession(session)"
        OnDuplicateSession="() => DuplicateSession(session)"/>
</CardList>

<FloatingBottomContainer>
    <Fab>
        <FloatingButton size="small" variant="surface" aria-label="Add Session" label="Add Session" OnClick="AddSession"><md-icon slot="icon">add</md-icon></FloatingButton>
    </Fab>
</FloatingBottomContainer>

@code {
    [SupplyParameterFromQuery(Name = "planId")]
    [Parameter] public Guid PlanId { get; set; }

    void MoveSessionUp(SessionBlueprint sessionBlueprint)
        => Dispatcher.Dispatch(new MoveSessionBlueprintUpInProgramAction(PlanId, sessionBlueprint));

    void MoveSessionDown(SessionBlueprint sessionBlueprint)
        => Dispatcher.Dispatch(new MoveSessionBlueprintDownInProgramAction(PlanId, sessionBlueprint));

    void RemoveSession(SessionBlueprint sessionBlueprint)
        => Dispatcher.Dispatch(new RemoveSessionFromProgramAction(PlanId, sessionBlueprint));

    void BackToSettings() => NavigationManager.NavigateTo("/settings");

    void SelectSession(SessionBlueprint sessionBlueprint, int index)
    {
        Dispatcher.Dispatch(new SetEditingSessionAction(sessionBlueprint));
        NavigationManager.NavigateTo($"/settings/manage-workouts/manage-session/{index}?planId={PlanId}");
    }

    async Task AddSession()
    {
        Dispatcher.Dispatch(
            new AddProgramSessionAction(
                PlanId,
                new SessionBlueprint($"Session {ProgramState.Value.GetSessionBlueprints(PlanId).Count + 1}", new ImmutableListValue<ExerciseBlueprint>())));
            await Task.Yield();
            await JSRuntime.InvokeVoidAsync("AppUtils.smoothScrollAndFocusLast", ".card");
        }

    void DuplicateSession(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(
        new AddProgramSessionAction(
            PlanId,
            sessionBlueprint with
            {
                Name = $"Session {ProgramState.Value.GetSessionBlueprints(PlanId).Count + 1}"
            }
        )
    );

    protected override void OnInitialized()
    {
        var title = PlanId == Guid.Empty ? "Manage Workouts" : ProgramState.Value.SavedPrograms[PlanId].Name;
        Dispatcher.Dispatch(new SetPageTitleAction(title));
        var backUrl = PlanId == Guid.Empty ? "/settings" : $"/settings/program-list";
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(backUrl));
        base.OnInitialized();
    }

    protected override void Dispose(bool disposing)
    {
        Dispatcher.Dispatch(new PublishIdentityIfEnabledAction());
        base.Dispose(disposing);
    }

}
