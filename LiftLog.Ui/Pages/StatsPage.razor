@page "/stats"
@using LiftLog.Ui.Services;
@using Fluxor;
@using LiftLog.Ui.Store.App;

@inject SessionService SessionService;
@inject IDispatcher Dispatcher;

@if(_exerciseStats.Count == 0)
{
<div class="flex flex-col justify-center items-center h-full gap-4 text-on-surface">
    <md-icon>info</md-icon>
    <span>
        <p>Nothing recorded yet!<br> Complete a session and check again.</p>
    </span>
</div>
}
else
{
    <CardList Items=_exerciseStats OnClick=HandleCardClick>
        <StatGraphCardContent ExerciseStatistics="context"/>
    </CardList>
}
<Dialog @ref=dialog>
    @if(_selectedExercise is not null)
    {
        <span slot="headline">@(_selectedExercise.Name)</span>
        <div slot="content" class="flex flex-col">
            <span class="flex justify-between text-on-surface"><span>Current: </span><WeightFormat Kilograms=@(_selectedExercise.CurrentKilograms)/></span>
            <span class="flex justify-between text-on-surface"><span>Max: </span><WeightFormat Kilograms=@(_selectedExercise.MaxKilograms)/></span>
            <span class="flex justify-between text-on-surface"><span>One Rep Max: </span><WeightFormat Kilograms=@(_selectedExercise.OneRepMax)/></span>
            <span class="flex justify-between text-on-surface"><span>Total Lifted: </span><WeightFormat Kilograms=@(_selectedExercise.TotalKilograms)/></span>
        </div>
    <div slot="actions">
        <AppButton Type=AppButtonType.Text OnClick=@(()=>dialog?.Close())>Close</AppButton>
    </div>
    }
</Dialog>
@code {
    private Dialog? dialog;
    private List<ExerciseStatistics> _exerciseStats = new();
    private ExerciseStatistics? _selectedExercise;

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Statistics"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(null));
        var sessions=  await SessionService.GetLatestSessionsAsync().Where(x=>x.RecordedExercises.Any()).ToListAsync();

        _exerciseStats = sessions.GroupBy(x=>x.Blueprint.Name).Select(sessions => new ExerciseStatistics(
                Name: sessions.Key,
                CurrentKilograms: 0,
                MaxKilograms: 0,
                OneRepMax: 0,
                TotalKilograms: sessions.Sum(x=>x.TotalKilogramsLifted),
                RecordedExercises: sessions.Select(x=>new RecordedExercise(
                    Blueprint: x.RecordedExercises.First().Blueprint,
                    Kilograms: x.TotalKilogramsLifted,
                    RecordedSets: ImmutableListValue.Of<RecordedSet?>(new RecordedSet(1, new DateTimeOffset(x.Date.ToDateTime(TimeOnly.MinValue))))))
                        .ToImmutableList(),
                ExpandOnClick: false))
            .Concat(sessions
            .SelectMany(x=>x.RecordedExercises)
            .GroupBy(x=>NormalizeName(x.Blueprint.Name))
            .Select(x=>x.ToList())
            .Where(x=>x.Count > 0)
            .Select(exercises=>new ExerciseStatistics(
                Name: exercises.First().Blueprint.Name,
                CurrentKilograms: exercises.First().Kilograms,
                MaxKilograms: exercises.Max(x=>x.Kilograms),
                OneRepMax: exercises.First().OneRepMax,
                TotalKilograms: exercises.Sum(x=>x.Kilograms),
                RecordedExercises: exercises.ToImmutableList(),
                ExpandOnClick: true
            )))
            .ToList();
    }

    private void HandleCardClick(ExerciseStatistics exerciseStatistics)
    {
        if(!exerciseStatistics.ExpandOnClick) return;
        _selectedExercise = exerciseStatistics;
        StateHasChanged();
        dialog?.Open();
    }

    private string NormalizeName(string name)
    {
        var lowerName= name.ToLower().Trim().Replace("flies", "flys");
        var withoutPlural = lowerName switch
        {
            string s when s.EndsWith("es") => s.Substring(0, s.Length - 2),
            string s when s.EndsWith("s") => s.Substring(0, s.Length - 1),
            _ => lowerName
        };

        return withoutPlural;
    }
}
