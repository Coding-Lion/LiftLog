@using Fluxor;

@page "/feed"

@inject IJSRuntime JSRuntime
@inject IState<FeedState> FeedState
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher

@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@implements IDisposable

<div class="sticky top-0 z-10 @TopNavColorClass -mx-2 transition-colors">
    <md-tabs @ref=tabs @onchange=HandleTabChange >
        <md-primary-tab  id="mainfeed-tab" active=@(GetTabActiveClass("mainfeed-panel")) aria-controls="mainfeed-panel" >Feed</md-primary-tab>
        <md-primary-tab  id="following-tab" active=@(GetTabActiveClass("following-panel")) aria-controls="following-panel" >Following</md-primary-tab>
        <md-primary-tab  id="followers-tab" active=@(GetTabActiveClass("followers-panel")) aria-controls="followers-panel" >Followers</md-primary-tab>
    </md-tabs>
</div>

<div class="mt-2 flex-grow">
    <div id="mainfeed-panel" role="tabpanel" aria-labelledby="mainfeed-tab" class="@(GetTabClass("mainfeed-panel")) min-h-full" @onpull-to-refresh=OnPullToRefresh >
        @if(FeedState.Value.Identity is null)
        {
            <Card IsHighlighted=true class="mb-4" >
                <div class="flex flex-col gap-2">
                    <h2 class="text-xl self-start">Start publishing to your feed</h2>
                    <p class="self-start text-left">You're not currently publishing your workouts for your friends to see</p>
                    <AppButton class="self-end" Type=AppButtonType.Text OnClick=NavigateToCreateFeedIdentity >Start</AppButton>
                </div>
            </Card>
        }else {
            <div class="flex justify-end">
                <AppButton Type=AppButtonType.Text OnClick=NavigateToCreateFeedIdentity >Your details</AppButton>
            </div>
        }

        @if(FeedState.Value.Feed is {Count: 0})
        {
            <div class="flex flex-col justify-center items-center h-full gap-4 text-on-surface">
                <md-icon>info</md-icon>
                <span>
                    <p>Nothing here yet!<br> Nobody you're following has published anything yet! Come back later.</p>
                </span>
            </div>
        }
        <VirtualizedCardList Items=@(FeedState.Value.Feed.Select(x=>(Item: x, User: FeedState.Value.Users.GetValueOrDefault(x.UserId))).Where(x=>x.User is not null).ToList()) OnClick=@(x=>ViewFeedSession(x.Item)) CardClass="animate-fade-zoom-in">
            <FeedItemCardContent Item=context.Item User=@(context.User) />
        </VirtualizedCardList>
    </div>

    <div id="following-panel" role="tabpanel" aria-labelledby="following-tab" class="@(GetTabClass("following-panel"))">
        @if(FeedState.Value.Users is {Count: 0})
        {
            <div class="flex flex-col justify-center items-center h-full gap-4 text-on-surface">
                <md-icon>info</md-icon>
                <span>
                    <p>Start following someone!<br>You're not currently following anyone, ask a friend for their share link to start!</p>
                </span>
            </div>
        }
        <VirtualizedCardList Items=@(FeedState.Value.Users.Values.ToList()) CardClass="animate-fade-zoom-in">
            <FeedUserCardContent User=context UpdateUser="UpdateUser" DeleteUser="() => BeginDeleteUser(context)" ViewUserPlan="() => ViewUserPlan(context)" />
        </VirtualizedCardList>
    </div>



    <div id="followers-panel" role="tabpanel" aria-labelledby="followers-tab" class="@(GetTabClass("followers-panel"))">
        @if(FeedState.Value.Identity is null)
        {
            <Card IsHighlighted=true class="mb-4" >
                <div class="flex flex-col gap-2">
                    <h2 class="text-xl self-start">Start publishing to your feed</h2>
                    <p class="self-start text-left">You're not currently publishing your workouts for your friends to see</p>
                    <AppButton class="self-end" Type=AppButtonType.Text OnClick=NavigateToCreateFeedIdentity >Start</AppButton>
                </div>
            </Card>
        }
        <div class="flex flex-col my-4">
        <FeedShareUrl/>
        </div>
        @if(FeedState.Value.Followers is {Count: 0} && FeedState.Value.FollowRequests is {Count: 0})
        {
            <div class="flex flex-col justify-center items-center h-full gap-4 text-on-surface">
                <md-icon>info</md-icon>
                <span>
                    <p>Nobody is following you yet!<br>Share your link with friends to get followers</p>
                </span>
            </div>
        }
        <VirtualizedCardList Items=@(FeedState.Value.FollowRequests.ToList()) CardClass="animate-fade-zoom-in">
            <FollowRequestCardContent FollowRequest=context Accept=@(()=>AcceptFollowRequest(context)) Deny=@(()=>DenyFollowRequest(context)) />
        </VirtualizedCardList>
        <VirtualizedCardList Items=@(FeedState.Value.Followers.ToList()) CardClass="animate-fade-zoom-in">
            <FollowerCardContent User=context RemoveFollower=@(()=> RemoveFollower(context))/>
        </VirtualizedCardList>
    </div>
</div>
<Dialog @ref=deleteUserDialog>
    <span slot="headline">Unfollow user</span>
    <span slot="content" class="block text-left">This will unfollow <span class="text-primary font-bold">@(userToDelete?.Nickname ?? userToDelete?.Name ?? "Anonymous User")</span> and remove all their content on your device.</span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" OnClick=@(()=>deleteUserDialog?.Close())>Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick=DeleteUser>Unfollow</AppButton>
    </div>
</Dialog>

@code
{

    [CascadingParameter(Name="TopNavColorClass")]
    public string TopNavColorClass { get; set; } = null!;


    private ElementReference tabs;
    private Dialog? deleteUserDialog;
    private FeedUser? userToDelete;

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Feed"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(null));
        Dispatcher.Dispatch(new FetchSessionFeedItemsAction());
        Dispatcher.Dispatch(new FetchInboxItemsAction());
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await JSRuntime.InvokeVoidAsync("AppUtils.setupPullToRefresh", "#mainfeed-panel");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnPullToRefresh()
    {
        Dispatcher.Dispatch(new FetchSessionFeedItemsAction());
        Dispatcher.Dispatch(new FetchInboxItemsAction());
    }

    private void NavigateToCreateFeedIdentity()
    {
        NavigationManager.NavigateTo("/feed/create-identity");
    }

    private void AcceptFollowRequest(FollowRequest request)
    {
        Dispatcher.Dispatch(new AcceptFollowRequestAction(request));
    }

    private void DenyFollowRequest(FollowRequest request)
    {
        Dispatcher.Dispatch(new DenyFollowRequestAction(request));
    }

    private void UpdateUser(FeedUser user)
    {
        Dispatcher.Dispatch(new PutFeedUserAction(user));
    }

    private void RemoveFollower(FeedUser follower)
    {
        Dispatcher.Dispatch(new StartRemoveFollowerAction(follower));
    }

    private void BeginDeleteUser(FeedUser user)
    {
        userToDelete = user;
        deleteUserDialog?.Open();
        StateHasChanged();
    }

    private void DeleteUser()
    {
        if(userToDelete is not null)
        {
            Dispatcher.Dispatch(new DeleteFeedUserAction(userToDelete.Id));
        }
        deleteUserDialog?.Close();
    }

    private void ViewUserPlan(FeedUser user)
    {
        NavigationManager.NavigateTo($"/feed/user-plan/{user.Id}");
    }

    private async Task HandleTabChange()
    {
        var activeTab = await JSRuntime.InvokeAsync<string>("AppUtils.getActiveTabControls", tabs);
        Dispatcher.Dispatch(new SetActiveTabAction(activeTab));
    }

    private string GetTabClass(string tabId)
    {
        return FeedState.Value.ActiveTab == tabId ? "" : "hidden";
    }

    private bool GetTabActiveClass(string tabId)
    {
        return FeedState.Value.ActiveTab == tabId;
    }

    private void ViewFeedSession(FeedItem item)
    {
        if(item is SessionFeedItem sessionItem){
            NavigationManager.NavigateTo($"/feed/view-session/{sessionItem.EventId}");
        }
    }

    protected override void Dispose(bool disposing){
        _ = JSRuntime.InvokeVoidAsync("AppUtils.destroyPullToRefresh");
        base.Dispose(disposing);
    }
}
