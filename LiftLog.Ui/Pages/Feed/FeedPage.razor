@using Fluxor;

@page "/feed"

@inject IJSRuntime JSRuntime
@inject IState<FeedState> FeedState
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher

@inherits Fluxor.Blazor.Web.Components.FluxorComponent
<div class="sticky top-0 z-10 @TopNavColorClass -mx-2 transition-colors">
    <md-tabs @ref=tabs @onchange=HandleTabChange>
        <md-primary-tab  id="mainfeed-tab" aria-controls="mainfeed-panel" >Feed</md-primary-tab>
        <md-primary-tab  id="following-tab" aria-controls="following-panel" >Following</md-primary-tab>
    </md-tabs>
</div>

<div class="mt-2">
    <div id="mainfeed-panel" role="tabpanel" aria-labelledby="mainfeed-tab" class="@(GetTabClass("mainfeed-panel"))">
        @if(FeedState.Value.Identity is null)
        {
            <Card IsHighlighted=true class="mb-4" >
                <div class="flex flex-col gap-2">
                    <h2 class="text-xl self-start">Start publishing to your feed</h2>
                    <p class="self-start text-left">You're not currently publishing your workouts for your friends to see</p>
                    <AppButton class="self-end" Type=AppButtonType.Text OnClick=NavigateToCreateFeedIdentity >Start</AppButton>
                </div>
            </Card>
        }else {
            <div class="flex justify-end">
                <AppButton Type=AppButtonType.Text OnClick=NavigateToCreateFeedIdentity >Your details</AppButton>
            </div>
        }

        @if(FeedState.Value.Feed is {Count: 0})
        {
            <div class="flex flex-col justify-center items-center h-full gap-4 text-on-surface">
                <md-icon>info</md-icon>
                <span>
                    <p>Nothing here yet!<br> Nobody you're following has published anything yet! Come back later.</p>
                </span>
            </div>
        }
        <VirtualizedCardList Items=@(FeedState.Value.Feed.Select(x=>(Item: x, User: FeedState.Value.Users.GetValueOrDefault(x.UserId))).Where(x=>x.User is not null).ToList())>
            <FeedItemCardContent Item=context.Item User=@(context.User) />
        </VirtualizedCardList>
    </div>

    <div id="following-panel" role="tabpanel" aria-labelledby="following-tab" class="@(GetTabClass("following-panel"))">
        @if(FeedState.Value.Users is {Count: 0})
        {
            <div class="flex flex-col justify-center items-center h-full gap-4 text-on-surface">
                <md-icon>info</md-icon>
                <span>
                    <p>Start following someone!<br>You're not currently following anyone, ask a friend for their share link to start!</p>
                </span>
            </div>
        }
        <VirtualizedCardList Items=@(FeedState.Value.Users.Values.ToList())>
            <FeedUserCardContent User=context UpdateUser="UpdateUser" DeleteUser="() => BeginDeleteUser(context)" ViewUserPlan="() => ViewUserPlan(context)" />
        </VirtualizedCardList>
    </div>
</div>
<Dialog @ref=deleteUserDialog>
    <span slot="headline">Unfollow user</span>
    <span slot="content" class="block text-left">This will unfollow <span class="text-primary font-bold">@(userToDelete?.Nickname ?? userToDelete?.Name ?? "someone")</span> and remove all their content on your device.</span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" OnClick=@(()=>deleteUserDialog?.Close())>Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick=DeleteUser>Unfollow</AppButton>
    </div>
</Dialog>

@code
{

    [CascadingParameter(Name="TopNavColorClass")]
    public string TopNavColorClass { get; set; } = null!;

    private ElementReference tabs;
    private Dialog? deleteUserDialog;
    private FeedUser? userToDelete;
    private string activeTab = "mainfeed-panel";

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Feed"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(null));
        Dispatcher.Dispatch(new FetchSessionFeedItemsAction());
        base.OnInitialized();
    }

    private void NavigateToCreateFeedIdentity()
    {
        NavigationManager.NavigateTo("/feed/create-identity");
    }

    private void UpdateUser(FeedUser user)
    {
        Dispatcher.Dispatch(new PutFeedUserAction(user));
    }

    private void BeginDeleteUser(FeedUser user)
    {
        userToDelete = user;
        deleteUserDialog?.Open();
        StateHasChanged();
    }

    private void DeleteUser()
    {
        if(userToDelete is not null)
        {
            Dispatcher.Dispatch(new DeleteFeedUserAction(userToDelete));
        }
        deleteUserDialog?.Close();
    }

    private void ViewUserPlan(FeedUser user)
    {
        NavigationManager.NavigateTo($"/feed/user-plan/{user.Id}");
    }

    private async Task HandleTabChange()
    {
        activeTab = await JSRuntime.InvokeAsync<string>("AppUtils.getActiveTabControls", tabs);
        StateHasChanged();
    }

    private string GetTabClass(string tabId)
    {
        return activeTab == tabId ? "" : "hidden";
    }
}
