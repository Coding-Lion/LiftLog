@using Fluxor;

@page "/feed/share"

@inject IState<FeedState> FeedState
@inject IStringSharer StringSharer
@inject IDispatcher Dispatcher

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if(FeedState.Value.SharedFeedUser != null)
{
    <div class="text-on-surface flex flex-col justify-center gap-4 p-4 h-full">
        <TextField label="Nickname" Value=@(FeedState.Value.SharedFeedUser.Nickname) OnChange="UpdateNickname" />
        <span class="text-lg"><span class="font-bold text-primary">@ResolvedName</span> wants to share their workouts with you!</span>
        <span class="text-sm">Would you like to see their workouts in your feed?</span>
        <div class="grid grid-cols-2 gap-2">
            <AppButton Type=AppButtonType.Text OnClick=HandleNoThanksClick>No thanks</AppButton>
            <AppButton Type=AppButtonType.Primary OnClick=HandleSureClick>Sure!</AppButton>
        </div>
    </div>
}
else
{
    <div class="flex flex-col justify-center h-full gap-4 text-on-surface ">
        <div><md-circular-progress aria-label="Session loading" indeterminate four-color></md-circular-progress></div>
        <span>
            <p>Loading User Info...</p>
        </span>
    </div>
}


@code
{
    [SupplyParameterFromQuery(Name="pub")]
    public string PublicKey { get; set; } = "";

    [SupplyParameterFromQuery(Name="id")]
    public Guid id { get; set; }

    [SupplyParameterFromQuery(Name="name")]
    public string? Name { get; set; }
    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Subscribe to a feed"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/feed"));
        if(String.IsNullOrEmpty(PublicKey) || id == Guid.Empty)
        {
            Dispatcher.Dispatch(new NavigateAction("/feed"));
        }else if(FeedState.Value.Identity is null) {
            Dispatcher.Dispatch(new NavigateAction("/feed/create-identity?from=" + Uri.EscapeDataString("/feed/share?pub=" + PublicKey + "&id=" + id + "&name=" + Name ?? "")));
        }else
        {
            Dispatcher.Dispatch(new SetSharedFeedUserAction(FeedUser.FromShared(id, PublicKey.FromUrlSafeHexString(), Name)));
        }
        base.OnInitialized();
    }

    private string ResolvedName => string.IsNullOrEmpty(Name) ? "Someone" : Name;

    private void HandleNoThanksClick()
    {
        Dispatcher.Dispatch(new SetSharedFeedUserAction(null));
        Dispatcher.Dispatch(new NavigateAction("/feed"));
    }

    private void HandleSureClick()
    {
        if(FeedState.Value.SharedFeedUser == null)
        {
            return;
        }
        Dispatcher.Dispatch(new RequestFollowSharedUserAction(FeedState.Value.SharedFeedUser));
        Dispatcher.Dispatch(new SetSharedFeedUserAction(null));
        Dispatcher.Dispatch(new NavigateAction("/feed"));
    }

    private void UpdateNickname(string value)
    {
        if(FeedState.Value.SharedFeedUser == null)
        {
            return;
        }
        Dispatcher.Dispatch(new SetSharedFeedUserAction(FeedState.Value.SharedFeedUser with { Nickname = value }));
    }

}
