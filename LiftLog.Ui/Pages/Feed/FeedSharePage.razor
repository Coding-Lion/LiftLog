@using Fluxor;

@page "/feed/share"

@inject IState<FeedState> FeedState
@inject IAppPurchaseService AppPurchaseService
@inject IJSRuntime JSRuntime
@inject IStringSharer StringSharer
@inject IDispatcher Dispatcher

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if (AppPurchaseService.GetAppStore() == AppStore.Web && phoneAppStore != AppStore.Web)
{
    <Dialog @ref="_alertWebAppDialog">
        <span slot="headline">Download App</span>
        <span slot="content" class="block text-left">This content is better in the app. If you have the app installed and you are seeing this, please update LiftLog in your phone's app store.</span>
        <div slot="actions">
            <AppButton Type="AppButtonType.Text" OnClick="() => { _alertWebAppDialog?.Close(); }">Ignore</AppButton>
            <AppButton Type="AppButtonType.Text" OnClick="OpenAppStore">Open app store</AppButton>
        </div>
    </Dialog>
}


@if (FeedState.Value.SharedFeedUser != null)
{
    <div class="text-on-surface flex flex-col justify-center gap-4 p-4 h-full">
        <TextField label="Give them a nickname?" Value=@(FeedState.Value.SharedFeedUser.Nickname ?? "") OnChange="UpdateNickname"/>
        <span class="text-lg"><span class="font-bold text-primary">@ResolvedName</span> wants to share their workouts with you!</span>
        <span class="text-sm">Would you like to see their workouts in your feed? <span class="font-bold text-primary">@ResolvedName</span> will need to approve your request on their device.</span>
        <div class="grid grid-rows-2 gap-2">
            <AppButton Type=AppButtonType.Primary OnClick=HandleSureClick>Send follow request</AppButton>
            <AppButton Type=AppButtonType.Text OnClick=HandleNoThanksClick>No thanks</AppButton>
        </div>
    </div>
}
else
{
    <div class="flex flex-col justify-center h-full gap-4 text-on-surface ">
        <div>
            <md-circular-progress aria-label="Session loading" indeterminate four-color></md-circular-progress>
        </div>
        <span>
            <p>Loading User Info...</p>
        </span>
    </div>
}


@code
{

    [SupplyParameterFromQuery(Name = "id")]
    public string? id { get; set; }

    [SupplyParameterFromQuery(Name = "name")]
    public string? Name { get; set; }

    private Dialog? _alertWebAppDialog;

    private AppStore phoneAppStore;

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Subscribe to a feed"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/feed"));
        if (FeedState.Value.Identity is null)
        {
            Dispatcher.Dispatch(new CreateFeedIdentityAction(null, null, false, false, false, FromUserAction: false));
        }
        else if (string.IsNullOrWhiteSpace(id))
        {
            Dispatcher.Dispatch(new NavigateAction("/feed"));
        }
        else
        {
            Dispatcher.Dispatch(new FetchAndSetSharedFeedUserAction(id, Name));
        }

        phoneAppStore = await GetAppStoreFromUserAgent();
        await base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            _alertWebAppDialog?.Open();
        }

        if (FeedState.Value.SharedFeedUser is not null
            && FeedState.Value.FollowedUsers.ContainsKey(FeedState.Value.SharedFeedUser.Id))
        {
            Dispatcher.Dispatch(new NavigateAction("/feed"));
        }
    }

    private string ResolvedName => string.IsNullOrEmpty(Name) ? "Anonymous User" : Name;

    private void HandleNoThanksClick()
    {
        Dispatcher.Dispatch(new SetSharedFeedUserAction(null));
        Dispatcher.Dispatch(new NavigateAction("/feed"));
    }

    private void HandleSureClick()
    {
        if (FeedState.Value.SharedFeedUser == null)
        {
            return;
        }

        Dispatcher.Dispatch(new RequestFollowUserAction());
        Dispatcher.Dispatch(new SetSharedFeedUserAction(null));
        Dispatcher.Dispatch(new NavigateAction("/feed"));
    }

    private void UpdateNickname(string value)
    {
        if (FeedState.Value.SharedFeedUser == null)
        {
            return;
        }

        Dispatcher.Dispatch(new SetSharedFeedUserAction(FeedState.Value.SharedFeedUser with { Nickname = value }));
    }

    private void OpenAppStore()
    {
        switch (phoneAppStore)
        {
            case AppStore.Apple:
                Dispatcher.Dispatch(new NavigateAction("https://apps.apple.com/au/app/liftlog/id6467372581"));
                break;
            case AppStore.Google:
                Dispatcher.Dispatch(new NavigateAction("https://play.google.com/store/apps/details?id=com.limajuice.liftlog"));
                break;
            default:
                break;
        }
    }

    private async Task<AppStore> GetAppStoreFromUserAgent()
    {
        var os = await JSRuntime.InvokeAsync<string>("AppUtils.getOs");
        switch (os)
        {
            case "iOS":
                return AppStore.Apple;
            case "Android":
                return AppStore.Google;
            default:
                return AppStore.Web;
        }
    }
}
