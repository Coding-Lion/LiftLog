@using Fluxor;

@page "/feed/create-identity"

@inject IState<FeedState> FeedState
@inject IStringSharer StringSharer
@inject IDispatcher Dispatcher

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if (FeedState.Value.Identity == null)
{
    <div class="text-on-surface flex flex-col gap-4 p-4">
        <span class="text-lg">Create a new account to start using the feed!</span>
        <TextField Value="@name" label="Your name (optional)" OnChange=@SetName/>
        <div>
            <Switch Label="Publish workouts" Value=@publishWorkouts OnSwitched="SetPublishWorkouts"/>
        </div>
        <div>
            <Switch Label="Publish bodyweight" Value=@publishBodyweight OnSwitched="SetPublishBodyweight"/>
        </div>
        <div>
            <Switch Label="Publish plan" Value=@publishPlan OnSwitched="SetPublishPlan"/>
        </div>
        <span class="text-sm">This will generate a new link which you can share with others.</span>
        <AppButton Type=AppButtonType.Text OnClick=StartPublishing>Create account</AppButton>
    </div>
}
else
{
    <div class="text-on-surface flex flex-col gap-4">
    <LabelledForm>
        <LabelledFormRow Label="Your Name" Icon="person">
        <TextField Value="@name" label="Optional" OnChange=@SetName/>
        </LabelledFormRow>
        <FeedShareUrl/>
        </LabelledForm>
        <md-list>
            <ListSwitch Headline="Publish workouts" SupportingText="Publish workouts as you complete them" Value=@publishWorkouts OnSwitched="SetPublishWorkouts"/>
            <ListSwitch Headline="Publish bodyweight" SupportingText="Publish your bodyweight with your workouts"  Value=@publishBodyweight OnSwitched="SetPublishBodyweight"/>
            <ListSwitch Headline="Publish plan" SupportingText="Publish your current plan for your followers to see and import" Value=@publishPlan OnSwitched="SetPublishPlan"/>
        </md-list>
        <AppButton Type=AppButtonType.Text OnClick="@(() => stopPublishingDialog?.Open())">Delete account</AppButton>
    </div>
}

<Dialog @ref="stopPublishingDialog">
    <span slot="headline">Delete account</span>
    <span slot="content" class="block text-left">This will delete your account on the servers and unsubscribe you from all feeds. You will need to resubscribe and share a new link if you want to enable the feed again.</span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" OnClick="@(() => stopPublishingDialog?.Close())">Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="StopPublishing">Delete</AppButton>
    </div>
</Dialog>

@code
{
    private string name = "";
    private bool publishBodyweight;
    private bool publishWorkouts;
    private bool publishPlan;
    private Dialog? stopPublishingDialog;

    [SupplyParameterFromQuery(Name = "from")]
    public string From { get; set; } = "";

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Start Publishing"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/feed"));
        name = FeedState.Value.Identity?.Name ?? "";
        publishBodyweight = FeedState.Value.Identity?.PublishBodyweight ?? false;
        publishPlan = FeedState.Value.Identity?.PublishPlan ?? true;
        publishWorkouts = FeedState.Value.Identity?.PublishWorkouts ?? true;
        base.OnInitialized();
    }

    private void StartPublishing()
    {
        Dispatcher.Dispatch(new CreateFeedIdentityAction(string.IsNullOrEmpty(name) ? null : name, null, publishBodyweight, publishPlan, publishWorkouts, From == null ? null : From));
    }

    private void UpdatePublishingDetails()
    {
        if (FeedState.Value.Identity is null)
            return;
        Dispatcher.Dispatch(new UpdateFeedIdentityAction(string.IsNullOrEmpty(name) ? null : name, null, publishBodyweight, publishPlan, publishWorkouts));
    }

    private void SetName(string value)
    {
        name = value;
        UpdatePublishingDetails();
    }

    private void SetPublishBodyweight(bool value)
    {
        publishBodyweight = value;
        UpdatePublishingDetails();
    }

    private void SetPublishWorkouts(bool value)
    {
        publishWorkouts = value;
        UpdatePublishingDetails();
    }

    private void SetPublishPlan(bool value)
    {
        publishPlan = value;
        UpdatePublishingDetails();
    }

    private void StopPublishing()
    {
        Dispatcher.Dispatch(new DeleteFeedIdentityAction());
        stopPublishingDialog?.Close();
    }

}
