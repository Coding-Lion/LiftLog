@using Fluxor;

@page "/feed/create-identity"

@inject IState<FeedState> FeedState
@inject IStringSharer StringSharer
@inject IDispatcher Dispatcher

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if(FeedState.Value.Identity == null)
{
    <div class="text-on-surface flex flex-col gap-4 p-4">
        <span class="text-lg">Create a new identity to start publishing!</span>
        <TextField Value="@(FeedState.Value.Identity?.Name ?? "")" label="Your name (optional)" OnChange=@SetName />
        <div>
            <Switch Label="Publish bodyweight" Value=@publishBodyweight OnSwitched="SetPublishBodyweight"/>
        </div>
        <div>
            <Switch Label="Publish plan" Value=@publishPlan OnSwitched="SetPublishPlan"/>
        </div>
        <span class="text-sm">This will generate a new link which you can share with others.</span>
        <AppButton Type=AppButtonType.Text OnClick=StartPublishing>Start publishing</AppButton>
    </div>
}
else
{
    <div class="text-on-surface flex flex-col gap-4 p-4">
        <span class="text-lg">Share this link to let others track your progress!</span>

        <TextField Value="@name" label="Your name (optional)" OnChange=@SetName />
        <TextField Value="@GetShareUrl()" label="Share Link" readonly="readonly" OnClick="HandleShareUrlClick" />
        <span class="text-sm">Only those with the link can see what you've shared.</span>
        <div>
            <Switch Label="Publish bodyweight" Value=@publishBodyweight OnSwitched="SetPublishBodyweight"/>
        </div>
        <div>
            <Switch Label="Publish plan" Value=@publishPlan OnSwitched="SetPublishPlan"/>
        </div>
        <AppButton Type=AppButtonType.Text OnClick="@(()=>stopPublishingDialog?.Open())">Stop publishing</AppButton>
    </div>
}

<Dialog @ref=stopPublishingDialog>
    <span slot="headline">Stop publishing</span>
    <span slot="content" class="block text-left">This will stop publishing data to other people's feed. If you want to start again, you will need to reshare your link with them.</span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" OnClick=@(()=>stopPublishingDialog?.Close())>Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick=StopPublishing>Stop publishing</AppButton>
    </div>
</Dialog>

@code
{
    private string name = "";
    private bool publishBodyweight;
    private bool publishPlan;
    private Dialog? stopPublishingDialog;
    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Start Publishing"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/feed"));
        name = FeedState.Value.Identity?.Name ?? "";
        publishBodyweight = FeedState.Value.Identity?.PublishBodyweight ?? false;
        publishPlan = FeedState.Value.Identity?.PublishPlan ?? true;
        base.OnInitialized();
    }


    private string? GetShareUrl()
    {
        if(FeedState.Value.Identity == null)
            return null;
        var encryptionKey = FeedState.Value.Identity.EncryptionKey;
        return FeedPageUtils.GetShareUrl(FeedState.Value.Identity.Id, encryptionKey);
    }

    private void StartPublishing()
    {
        Dispatcher.Dispatch(new CreateFeedIdentityAction(Guid.NewGuid(), string.IsNullOrEmpty(name) ? null : name, null, publishBodyweight, publishPlan));
    }

    private void UpdatePublishingDetails()
    {
        if(FeedState.Value.Identity is null)
            return;
        Dispatcher.Dispatch(new UpdateFeedIdentityAction(string.IsNullOrEmpty(name) ? null : name, null, publishBodyweight, publishPlan));
    }

    private async Task HandleShareUrlClick()
    {
        var shareUrl = GetShareUrl();
        if(shareUrl == null)
            return;
        await StringSharer.ShareAsync(shareUrl);
    }

    private void SetName(string value)
    {
        name = value;
        UpdatePublishingDetails();
    }

    private void SetPublishBodyweight(bool value)
    {
        publishBodyweight = value;
        UpdatePublishingDetails();
    }

    private void SetPublishPlan(bool value)
    {
        publishPlan = value;
        UpdatePublishingDetails();
    }

    private void StopPublishing(){
        Dispatcher.Dispatch(new DeleteFeedIdentityAction());
        stopPublishingDialog?.Close();
    }

}
